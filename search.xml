<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>定点数和浮点数</title>
    <url>/2022/01/15/base/fixed-and-float-point/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在说定点数和浮点数之前，先回顾一下，整数和小数在计算机怎么表示——二进制形式。</p>
<span id="more"></span>

<h3 id="进制计数制"><a href="#进制计数制" class="headerlink" title="进制计数制"></a>进制计数制</h3><p>生活中常见的是十进制，那么在计算机中，常见的进制：</p>
<ol>
<li>二进制（B，binary），基本符号0、1</li>
<li>八进制（O，Octal），基本符号0、1、2、3、4、5、6、7</li>
<li>十进制（D，Decimal），基本符号0、1、2、3、4、5、6、7、8、9</li>
<li>十六进制（H，Hexadecimal），基本符号0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F</li>
</ol>
<img src="/2022/01/15/base/fixed-and-float-point/1.png" class="" title="1.png">

<h3 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h3><p>进制之间的转换，可以分为二进制转其他进制，或者反过来，其他进制转二进制。<br>在转换之前，需要了解<mark class="label ">原码、反码、补码</mark></p>
<h4 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h4><ol>
<li><p>原码，就是符号位加上数字的二进制数表示的形式。</p>
<p> 🌰 举例子，Java中byte（1一个字节，长度8位）类型：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+7(D)的原码：0000 0111</span><br><span class="line">-7(D)的原码：1000 0111</span><br></pre></td></tr></table></figure></li>
<li><p>反码，正数情况下，与原码一致；负数情况下，符号位不变，在原码的基础每一位取反。</p>
<p> 🌰 举例子，Java中byte（1一个字节，长度8位）类型：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+7(D)的原码：0000 0111，反码：0000 0111</span><br><span class="line">-7(D)的原码：1000 0111，反码：1111 1000</span><br></pre></td></tr></table></figure></li>
<li><p>补码，正数情况下，与原码一致；负数情况下，在反码基础加1</p>
<p>🌰 举例子，Java中byte（1一个字节，长度8位）类型：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+7(D)的原码：0000 0111，反码：0000 0111，补码：0000 0111</span><br><span class="line">-7(D)的原码：1000 0111，反码：1111 1000，补码：1111 1001</span><br></pre></td></tr></table></figure></li>
</ol>
<p>总结，正数情况下，三码相同；负数情况下，反码符号位不变，其余位取反，补码在反码加1。</p>
<h4 id="二进制转其他-R"><a href="#二进制转其他-R" class="headerlink" title="二进制转其他(R)"></a>二进制转其他(R)</h4><ol>
<li>二进制转十进制 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1011(B) = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 11(D) </span><br></pre></td></tr></table></figure></li>
<li>二进制转八进制<blockquote>
<p>整数部分从低位到高位方向每3位改写成八进制数替换，最后不足3位时在高位补0。<br>小数部分从高位向低位方向每3位改写成八进制数替换，最后不足3位时在低位补0。</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1011(B) = 001 011 = 13(O)</span><br></pre></td></tr></table></figure></li>
<li>二进制转十六进制<blockquote>
<p>整数部分从低位到高位方向每4位改写成十六进制数替换，最后不足4位时在高位补0。<br>小数部分从高位向低位方向每4位改写成十六进制数替换，最后不足4位时在低位补0。</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10110(B) = 1011 0 = B0(H) </span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="其他-R-转二进制"><a href="#其他-R-转二进制" class="headerlink" title="其他(R)转二进制"></a>其他(R)转二进制</h4><p>反过来即可</p>
<h4 id="十进制正数、负数转其他进制-R"><a href="#十进制正数、负数转其他进制-R" class="headerlink" title="十进制正数、负数转其他进制(R)"></a>十进制正数、负数转其他进制(R)</h4><p>要将整数部分和小数部分分别进行转换，这两部分的转换规则是不同的。</p>
<ol>
<li>整数部分的转换规则： <blockquote>
<p>反复除以基数R，直到余数为0为止，每次除法得到的余数从下到上依次排列即是R进制数最终结果。</p>
</blockquote>
</li>
</ol>
<img src="/2022/01/15/base/fixed-and-float-point/2.png" class="" title="2.png">

<p>所以135(D) &#x3D; 207(O) &#x3D; 10000111(B)</p>
<ol start="2">
<li>小数部分的转换规则：<blockquote>
<p>反复乘以基数R，得到的数字小数部分继续与基数R相乘，直到结果的小数部分为0为止，<br>每次相乘得到的中间结果从高到低依次排列即是最终结果。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.6875 * 2 = 1.375  整数部分=1  （高位）</span><br><span class="line">0.375 * 2 = 0.75    整数部分=0    ↓</span><br><span class="line">0.75 * 2 = 1.5      整数部分=1    ↓</span><br><span class="line">0.5 * 2 = 1.0       整数部分=1  （低位）</span><br></pre></td></tr></table></figure>
<p>所以0.6875(D) &#x3D; 0.1011(B)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.6875 * 8 = 5.5    整数部分=5  （高位）</span><br><span class="line">0.5 * 8 = 4.0       整数部分=4  （低位）</span><br></pre></td></tr></table></figure>
<p>所以0.6875(D) &#x3D; 0.54(O)。</p>
<mark class="label danger">有一种情况就是每次乘积后的小数部分永远得不到0，这种情况下得到的是个近似值。</mark>

<h2 id="什么是定点数"><a href="#什么是定点数" class="headerlink" title="什么是定点数"></a>什么是定点数</h2><p>定点数，就是固定小数点的位置，小数点前后的数字用二进制存储在计算机中的一种方式。</p>
<p>🌰 举例子，Java中byte（1一个字节，长度8位）类型，假设约定整数部分占4位，小数部分占4位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.1(D) = 0010 0001(B)</span><br></pre></td></tr></table></figure>
<p>总结，定点数逻辑简单，但是有一个弊端，按照以上的约定规则整数最大数为<code>15(D) = 1111(B)</code>，小数部分最小为<code>0.9375(D) = 0.1111(b)</code>。<br>表示范围有限，假设想表示更大的数：</p>
<ol>
<li>扩大字节长度，占2个以上字节。这种方式占用计算机内存</li>
<li>扩大整数部分占用位数，小数点右移。比如整数占5位。这种方式会降低小数精度。<br>相反，想表示更小的数，也会有这样的问题。</li>
</ol>
<h2 id="什么是浮点数"><a href="#什么是浮点数" class="headerlink" title="什么是浮点数"></a>什么是浮点数</h2><p>浮点数，就是小数点的位置不是固定的，小数点前后的数字用二进制存储在计算机中的一种方式。</p>
<h3 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h3><p>浮点数是采用科学计数法的方式来表示的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1015(D) = 0.1015 * 10^4 (D) </span><br><span class="line">1015(D) = 1.015 * 10^3 (D)</span><br><span class="line">1015(D) = 10.15 * 10^2 (D)</span><br></pre></td></tr></table></figure>
<p>这样的形式，小数点就是浮动。根据以上的表示格式，总结出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V = (-1)^S * M * R^E</span><br></pre></td></tr></table></figure>
<p>其中各个变量的含义如下：</p>
<ul>
<li>S：符号位，取值 0 或 1，决定一个数字的符号，0 表示正，1 表示负</li>
<li>M：尾数，用小数表示，例如前面所看到的 1.015 * 10^3，1.015 就是尾数</li>
<li>R：基数，表示十进制数 R 就是 10，表示二进制数 R 就是 2</li>
<li>E：指数，用整数表示，例如前面看到的 10^-1，-1 即是指数</li>
</ul>
<img src="/2022/01/15/base/fixed-and-float-point/3.png" class="">

<h3 id="浮点数标准"><a href="#浮点数标准" class="headerlink" title="浮点数标准"></a>浮点数标准</h3><p>根据以上的公式，指数和尾数分配规则不同，产生结果也不同。，因此有了浮点数标准。</p>
<blockquote>
<p>单精度浮点数float：32 位，符号位 S 占 1 bit，指数 E 占 8 bit，尾数 M 占 23 bit</p>
</blockquote>
<blockquote>
<p>双精度浮点数double：64 位，符号位 S 占 1 bit，指数 E 占 11 bit，尾数 M 占 52 bit</p>
</blockquote>
<p>为了使其表示的数字范围、精度最大化，浮点数标准还对指数和尾数进行了规定：</p>
<ul>
<li>尾数 M 的第一位总是 1（因为 1 &lt;&#x3D; M &lt; 2），因此这个 1 可以省略不写，它是个隐藏位，<br>这样单精度 23 位尾数可以表示了 24 位有效数字，双精度 52 位尾数可以表示 53 位有效数字</li>
<li>指数 E 是个无符号整数，表示 float 时，一共占 8 bit，所以它的取值范围为 0 ~ 255。<br>但因为指数可以是负的，所以规定在存入 E 时在它原本的值加上一个中间数 127，这样 E 的取值范围为 -127 ~ 128。<br>表示 double 时，一共占 11 bit，存入 E 时加上中间数 1023，这样取值范围为 -1023 ~ 1024。</li>
</ul>
<p>除了规定尾数和指数位，还做了以下规定：</p>
<ol>
<li>指数 E 非全 0 且非全 1：规格化数字，按上面的规则正常计算 </li>
<li>指数 E 全 0，尾数非 0：非规格化数，尾数隐藏位不再是 1，而是 0(M &#x3D; 0.xxxxx)，这样可以表示 0 和很小的数 </li>
<li>指数 E 全 1，尾数全 0：正无穷大&#x2F;负无穷大（正负取决于 S 符号位） </li>
<li>指数 E 全 1，尾数非 0：NaN(Not a Number)</li>
</ol>
<img src="/2022/01/15/base/fixed-and-float-point/4.png" class="">

<h3 id="标准浮点数的表示"><a href="#标准浮点数的表示" class="headerlink" title="标准浮点数的表示"></a>标准浮点数的表示</h3><p>有了统一的浮点数标准，我们再把 25.125 转换为标准的 float 浮点数：</p>
<ul>
<li>整数部分：25(D) &#x3D; 11001(B)</li>
<li>小数部分：0.125(D) &#x3D; 0.001(B)</li>
</ul>
<p>用二进制科学计数法表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">25.125(D) = 11001.001(B) = 1.1001001 * 2^4(B)</span><br></pre></td></tr></table></figure>

<p>所以 S &#x3D; 0，尾数 M &#x3D; 1.001001 &#x3D; 001001(去掉1，隐藏位)，<br>指数 E &#x3D; 4 + <mark class="label ">127(中间数)</mark> &#x3D; 135(D) &#x3D; 10000111(B)。 填充到 32 bit 中，如下：</p>
<img src="/2022/01/15/base/fixed-and-float-point/5.png" class="">

<h3 id="浮点数精度丢失"><a href="#浮点数精度丢失" class="headerlink" title="浮点数精度丢失"></a>浮点数精度丢失</h3><p>🌰 举例子，0.2(D)用浮点数表示，在转二进制时发现乘以2陷入循环，而浮点数的尾数长度有限，<br>因此不能准确表示0.2，发生精度丢失情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.2 * 2 = 0.4 -&gt; 0</span><br><span class="line">0.4 * 2 = 0.8 -&gt; 0</span><br><span class="line">0.8 * 2 = 1.6 -&gt; 1</span><br><span class="line">0.6 * 2 = 1.2 -&gt; 1</span><br><span class="line">0.2 * 2 = 0.4 -&gt; 0（发生循环）</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="浮点数的范围和精度"><a href="#浮点数的范围和精度" class="headerlink" title="浮点数的范围和精度"></a>浮点数的范围和精度</h3><p>单精度浮点数 float 为例。</p>
<p>它能表示的最大二进制数为 +1.1.11111…1 * 2^127（小数点后23个1）， 而二进制 1.11111…1 ≈ 2，<br>所以 float 能表示的最大数为 2^128 &#x3D; 3.4 * 10^38，<br>即 float 的表示范围为：-3.4 * 10^38 ~ 3.4 * 10 ^38。</p>
<p>float 能表示的最小二进制数为 0.0000….1（小数点后22个0，1个1），用十进制数表示就是 1&#x2F;2^23。</p>
<p>用同样的方法可以算出，<br>double 能表示的最大二进制数为 +1.111…111（小数点后52个1） * 2^1023 ≈ 2^1024 &#x3D; 1.79 * 10^308，<br>所以 double 能表示范围为：-1.79 * 10^308 ~ +1.79 * 10^308。</p>
<p>double 的最小精度为：0.0000…1(51个0，1个1)，用十进制表示就是 1&#x2F;2^52。</p>
<h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p>从上得知，浮点数存在精度丢失的问题，那么在开发过程中，一般使用<code>BigDecimal</code>确保精度。</p>
<h3 id="BigDecimal-使用注意事项"><a href="#BigDecimal-使用注意事项" class="headerlink" title="BigDecimal 使用注意事项"></a>BigDecimal 使用注意事项</h3><ul>
<li>在使用BigDecimal时，为了防止精度丢失，推荐使用它的<code>BigDecimal(String val)</code>构造方法<br>或者<code>BigDecimal.valueOf(double val)</code>静态方法来创建对象。</li>
<li>使用<code>divide</code>方法的时候尽量使用<code>divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</code>，<br>其中<code>scale</code>表示要保留几位小数，roundingMode 代表保留规则，并且RoundingMode参数不要选择<code>UNNECESSARY</code>，<br>否则很可能会遇到<code>ArithmeticException</code>（无法除尽出现无限循环小数的时候）。</li>
<li>大小比较使用<code>compareTo</code>方法</li>
</ul>
<h3 id="BigDecimal如何防止精度丢失"><a href="#BigDecimal如何防止精度丢失" class="headerlink" title="BigDecimal如何防止精度丢失"></a>BigDecimal如何防止精度丢失</h3><h4 id="add源码分析"><a href="#add源码分析" class="headerlink" title="add源码分析"></a><code>add</code>源码分析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BigDecimal <span class="title function_">add</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> xs, <span class="type">int</span> scale1, <span class="keyword">final</span> <span class="type">long</span> ys, <span class="type">int</span> scale2)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sdiff</span> <span class="operator">=</span> (<span class="type">long</span>) scale1 - scale2;</span><br><span class="line">    <span class="keyword">if</span> (sdiff == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> add(xs, ys, scale1);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdiff &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">raise</span> <span class="operator">=</span> checkScale(xs,-sdiff);</span><br><span class="line">        <span class="type">long</span> <span class="variable">scaledX</span> <span class="operator">=</span> longMultiplyPowerTen(xs, raise);</span><br><span class="line">        <span class="keyword">if</span> (scaledX != INFLATED) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(scaledX, ys, scale2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">bigsum</span> <span class="operator">=</span> bigMultiplyPowerTen(xs,raise).add(ys);</span><br><span class="line">            <span class="keyword">return</span> ((xs^ys)&gt;=<span class="number">0</span>) ? <span class="comment">// same sign test</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(bigsum, INFLATED, scale2, <span class="number">0</span>)</span><br><span class="line">                : valueOf(bigsum, scale2, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">raise</span> <span class="operator">=</span> checkScale(ys,sdiff);</span><br><span class="line">        <span class="type">long</span> <span class="variable">scaledY</span> <span class="operator">=</span> longMultiplyPowerTen(ys, raise);</span><br><span class="line">        <span class="keyword">if</span> (scaledY != INFLATED) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(xs, scaledY, scale1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">bigsum</span> <span class="operator">=</span> bigMultiplyPowerTen(ys,raise).add(xs);</span><br><span class="line">            <span class="keyword">return</span> ((xs^ys)&gt;=<span class="number">0</span>) ?</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(bigsum, INFLATED, scale1, <span class="number">0</span>)</span><br><span class="line">                : valueOf(bigsum, scale1, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/01/15/base/fixed-and-float-point/6.png" class="" title="6.png">

<p>这是重点，逐行分析：</p>
<ol>
<li><code>checkScale</code>方法检查<code>sdiff</code>从long转int类型是否相等，不想等则检查是否超出<code>Integer.MAX_VALUE</code>，以及检查ys是否为0，返回<code>sdiff</code>的int值</li>
<li><code>longMultiplyPowerTen</code>方法，把ys扩大，乘以10的raise次方</li>
<li>最终变成long类型的整型数相加</li>
</ol>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>BigDecimal在计算时，实际会把数值扩大10的n次倍，变成一个long型整数进行计算，<br>整数计算时自然可以实现精度不丢失。同时结合精度scale，实现最终结果的计算。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>在 GitHub Actions 上部署 Hexo 博客</title>
    <url>/2024/07/01/blog/hexo-deploy-github-action/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/github-pages">Hexo官方文档：在 GitHub Pages 上部署 Hexo</a></li>
<li><a href="https://hexo.io/zh-cn/docs/one-command-deployment">Hexo官方文档：一键部署</a></li>
<li><a href="https://github.com/marketplace/actions/hexo-action">Hexo Action</a></li>
</ul>
</blockquote>
<p>本文将使用 <mark class="label info">GitHub Actions</mark> 部署至 <mark class="label info">GitHub Pages</mark>，<br>此方法适用于公开或私人储存库。</p>
<span id="more"></span>

<h2 id="使用-Hexo-创建第一篇博客"><a href="#使用-Hexo-创建第一篇博客" class="headerlink" title="使用 Hexo 创建第一篇博客"></a>使用 Hexo 创建第一篇博客</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo: 7.2.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">node: 21.7.1</span><br></pre></td></tr></table></figure>

<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>指定文件夹初始化，新建hexo项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure>

<p>执行完成后，目录结构如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml					# hexo 配置文件</span><br><span class="line">├── package.json				# hexo 依赖文件</span><br><span class="line">├── scaffolds					# 模版目录</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts					# 归档目录</span><br><span class="line">|   └── _posts					# 博客目录</span><br><span class="line">└── themes					# 主题目录</span><br></pre></td></tr></table></figure>

<p>对于各个文件、目录更多详情，请移步 <a href="https://hexo.io/zh-cn/docs/setup">Hexo官方文档：建站</a></p>
<h4 id="新建第一篇博客"><a href="#新建第一篇博客" class="headerlink" title="新建第一篇博客"></a>新建第一篇博客</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有设置 layout 的话，默认 post</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new [layout] --path [path/title] <span class="string">&quot;title&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>更多命令，请移步 <a href="https://hexo.io/zh-cn/docs/commands">Hexo官方文档：指令</a></p>
<h4 id="本地运行-hexo"><a href="#本地运行-hexo" class="headerlink" title="本地运行 hexo"></a>本地运行 hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run server</span></span><br></pre></td></tr></table></figure>

<p>执行命令，当看到截图所示，则说明项目启动成功 🎉</p>
<img src="/2024/07/01/blog/hexo-deploy-github-action/img.png" class="" title="img.png">

<h2 id="使用-GitHub-Actions-部署-Hexo-博客"><a href="#使用-GitHub-Actions-部署-Hexo-博客" class="headerlink" title="使用 GitHub Actions 部署 Hexo 博客"></a>使用 GitHub Actions 部署 Hexo 博客</h2><p><strong>GitHub Actions</strong> 是一种持续集成和持续交付(CI&#x2F;CD) 平台，<br>可用于自动执行生成、测试和部署管道。</p>
<p><strong>GitHub Pages</strong> 是一项静态站点托管服务，它直接从GitHub 上的仓库获取HTML、<br>CSS 和JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。</p>
<p>所以，我们需要两个github repository：</p>
<ol>
<li><strong>blog</strong> 仓库用于存放hexo源码</li>
<li><strong>maozzi.github.io</strong> 仓库用于存放hexo 打包编译后的静态文件</li>
</ol>
<p>设计两个repo的原因：</p>
<ol>
<li>代码不会互相干扰，源代码更加简洁，不会增加多余的静态文件</li>
<li>源代码库可以选择private，更高的安全性、隐私性</li>
</ol>
<h3 id="开始-1"><a href="#开始-1" class="headerlink" title="开始"></a>开始</h3><p>新建两个仓库，blog（名字随意）与 maozzi.github.io，blog仓库公开(public)还是私有(private)<br>自行决定，影响不大。</p>
<p>⚠️注意：<br>maozzi.github.io 仓库名字比较特殊，跟 <strong>GitHub Pages</strong> 规则有关。就是<br>只有命名以 {github的username}.github.io 项目名称格式，最终才能通过<br>https:&#x2F;&#x2F;{github的username}.github.io 访问自己的博客。</p>
<p>我的 {github的username} 是 maozzi，所以我的项目名为 maozzi.github.io，<br>同时可以通过 <a href="https://maozzi.github.io/">https://maozzi.github.io</a> 访问我的博客。</p>
<img src="/2024/07/01/blog/hexo-deploy-github-action/img_1.png" class="" title="img_1.png">

<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>我们主要往源代码库(blog)推送hexo项目代码，blog 仓库执行打包编译，<br>那么 blog 仓库如何把打包后代码推送给 maozzi.github.io 呢？</p>
<p>这时需要使用 git push 命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --force https://&#123;token&#125;@github.com/&#123;username&#125;/&#123;username&#125;.github.io.git master:master</span><br></pre></td></tr></table></figure>

<p>这条命令需要两个参数：</p>
<ol>
<li>token: 指 github 生成的具有选定权限的密钥 token</li>
<li>username: 指 GitHub username，就是你的<strong>登录用户名</strong>，不是昵称！！！</li>
</ol>
<h4 id="token-配置"><a href="#token-配置" class="headerlink" title="token 配置"></a>token 配置</h4><ol>
<li>进入 github 个人设置(Settings)，URL: <a href="https://github.com/settings/profile">https://github.com/settings/profile</a>  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_2.png" class="" title="img_2.png"></li>
<li>往下滑，找到 <strong>Developer Settings</strong> 进入，URL：<a href="https://github.com/settings/apps">https://github.com/settings/apps</a>  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_3.png" class="" title="img_3.png"></li>
<li>展开 <strong>Personal access tokens</strong>，选择 <strong>Tokens (classic)</strong> 点击进入，<br>  选择右上角 Generate new token -&gt; classic， URL：<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a>  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_4.png" class="" title="img_4.png"></li>
<li>最后，选择想要的权限，点击完成，保存好这个token，可以选择永不过期，<br>  URL：<a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a>  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_5.png" class="" title="img_5.png"></li>
</ol>
<h4 id="blog-仓库配置"><a href="#blog-仓库配置" class="headerlink" title="blog 仓库配置"></a>blog 仓库配置</h4><p>blog 仓库，主要工作是使用 GitHub Actions 打包编译hexo项目，最后把打包好的静态文件<br>git push 到 maozzi.github.io 仓库。</p>
<p>GitHub Actions 每次打包编译都是新建一个新的docker 容器环境，所有的工作都是在<br>docker 容器中完成。在最后的 git push 需要使用到的参数，则需要使用环境变量，<br>而环境变量，则需要 blog 仓库来设置。</p>
<ol>
<li>进入 blog 仓库设置(Settings)  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_6.png" class="" title="img_6.png"></li>
<li>选择 <strong>Secrets and variables</strong> -&gt; <strong>actions</strong>，点击 <strong>New repository secret</strong>  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_7.png" class="" title="img_7.png"></li>
<li>新建3个环境变量<ol>
<li><strong>DEPLOY_KEY</strong>：刚才生成的 github token，用于 git push</li>
<li><strong>EMAIL</strong>：github 注册邮箱，用于在docker容器中git全局邮箱设置</li>
<li><strong>USERNAME</strong>：github 登录用户名，用于在docker容器中git全局用户名设置以及<br>  git push 需使用</li>
</ol>
</li>
</ol>
<h3 id="GitHub-Actions-脚本文件"><a href="#GitHub-Actions-脚本文件" class="headerlink" title="GitHub Actions 脚本文件"></a>GitHub Actions 脚本文件</h3><p>GitHub Actions 以工作流方式，使其在存储库中发生事件（例如打开拉取请求或创建问题）时触发。</p>
<p>工作流包含一个或多个可按顺序或并行运行的作业。工作流程由签入到存储库的 YAML 文件定义，<br>并在存储库中的事件触发时运行，也可以手动触发，或按定义的时间表触发。</p>
<p>每个作业都将在其自己的虚拟机运行器中或在容器中运行，并具有一个或多个步骤，<br>用于运行定义的脚本或运行动作。</p>
<p>动作是一个可重用的扩展，可简化工作流。</p>
<h4 id="定义工作流-定义-YAML-文件"><a href="#定义工作流-定义-YAML-文件" class="headerlink" title="定义工作流(定义 YAML 文件)"></a>定义工作流(定义 YAML 文件)</h4><p>在hexo项目中，新建 <strong>.github&#x2F;workflows&#x2F;deploy.yml</strong>，yaml文件名可以随意</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else).</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">21</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span></span><br><span class="line">          <span class="comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;21&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">Pages</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-pages-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">./public</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ./public</span></span><br><span class="line"><span class="string">          git init</span></span><br><span class="line"><span class="string">          git config --global user.name &#x27;$&#123;&#123; secrets.USERNAME &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">          git config --global user.email &#x27;$&#123;&#123; secrets.EMAIL &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; $(date +&quot;%Z %Y-%m-%d %A %H:%M:%S&quot;) Updated By Github Actions&quot;</span></span><br><span class="line"><span class="string">          git push --force https://$&#123;&#123; secrets.DEPLOY_KEY &#125;&#125;@github.com/$&#123;&#123; secrets.USERNAME &#125;&#125;/$&#123;&#123; secrets.USERNAME &#125;&#125;.github.io.git master:master</span></span><br></pre></td></tr></table></figure>

<h4 id="本地推送代码"><a href="#本地推送代码" class="headerlink" title="本地推送代码"></a>本地推送代码</h4><p>blog 仓库是保存源代码的，保存 hexo 项目，所以本地 git push 代码到 blog 仓库即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>进入 blog 仓库 -&gt; <strong>Actions</strong>，查看工作流的状态：</p>
<ol>
<li>工作流如果绿勾✅，则说明运行成功，可以查看 maozzi.github.io 仓库是否有文件，<br>  <a href="https://maozzi.github.io,是否可以访问/">https://maozzi.github.io，是否可以访问</a>  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_8.png" class="" title="img_8.png"></li>
<li>工作流如果红叉❌，则说明运行失败，点击进入详情查看失败原因，逐步分析。  <img src="/2024/07/01/blog/hexo-deploy-github-action/img_9.png" class="" title="img_9.png"></li>
</ol>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li>Q：node 版本问题 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">notsup Unsupported engine for hexo-log@4.1.0: wanted: &#123;&quot;node&quot;:&quot;&gt;=14&quot;&#125; (current: &#123;&quot;node&quot;:&quot;12.22.12&quot;,&quot;npm&quot;:&quot;6.14.16&quot;&#125;)</span><br></pre></td></tr></table></figure>

 <img src="/2024/07/01/blog/hexo-deploy-github-action/img_10.png" class="" title="img_10.png">

 A：修改或指定yaml文件中node版本</li>
<li>Q：npm ci 问题<br><br>  A：改成npm i</li>
</ol>
]]></content>
      <categories>
        <category>博客杂项</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab Pages 部署 Hexo 博客</title>
    <url>/2018/10/14/blog/hexo-deploy-gitlab-pages/</url>
    <content><![CDATA[<h2 id="使用-Hexo-创建第一篇博客"><a href="#使用-Hexo-创建第一篇博客" class="headerlink" title="使用 Hexo 创建第一篇博客"></a>使用 Hexo 创建第一篇博客</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo: 7.2.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">node: 21.7.1</span><br></pre></td></tr></table></figure>

<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>指定文件夹初始化，新建hexo项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure>

<p>执行完成后，目录结构如下</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml					# hexo 配置文件</span><br><span class="line">├── package.json				# hexo 依赖文件</span><br><span class="line">├── scaffolds					# 模版目录</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts					# 归档目录</span><br><span class="line">|   └── _posts					# 博客目录</span><br><span class="line">└── themes					# 主题目录</span><br></pre></td></tr></table></figure>

<p>对于各个文件、目录更多详情，请移步 <a href="https://hexo.io/zh-cn/docs/setup">Hexo官方文档：建站</a></p>
<h4 id="新建第一篇博客"><a href="#新建第一篇博客" class="headerlink" title="新建第一篇博客"></a>新建第一篇博客</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有设置 layout 的话，默认 post</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new [layout] --path [path/title] <span class="string">&quot;title&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>更多命令，请移步 <a href="https://hexo.io/zh-cn/docs/commands">Hexo官方文档：指令</a></p>
<h4 id="本地运行-hexo"><a href="#本地运行-hexo" class="headerlink" title="本地运行 hexo"></a>本地运行 hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run server</span></span><br></pre></td></tr></table></figure>

<p>执行命令，当看到截图所示，则说明项目启动成功 🎉</p>
<img src="/2018/10/14/blog/hexo-deploy-gitlab-pages/img.png" class="" title="img.png">

<h2 id="使用-GitLab-Pages-部署-Hexo-博客"><a href="#使用-GitLab-Pages-部署-Hexo-博客" class="headerlink" title="使用 GitLab Pages 部署 Hexo 博客"></a>使用 GitLab Pages 部署 Hexo 博客</h2><h3 id="新建-maozzi-gitlab-io-仓库"><a href="#新建-maozzi-gitlab-io-仓库" class="headerlink" title="新建 maozzi.gitlab.io 仓库"></a>新建 maozzi.gitlab.io 仓库</h3><p>浏览器输入 gitlab URL 并登录 <a href="https://gitlab.com/">https://gitlab.com/</a>，<br>创建一个仓库，名称必须为 {username}.gitlab.io，我的username（登录用户名），<br>这样才能使用 <a href="https://maozzi.gitlab.io/">https://maozzi.gitlab.io</a>访问。</p>
<p>如图：</p>
<img src="/2018/10/14/blog/hexo-deploy-gitlab-pages/img_1.png" class="" title="img_1.png">

<img src="/2018/10/14/blog/hexo-deploy-gitlab-pages/img_2.png" class="" title="img_1.png">

<h3 id="新建-CI-CD-配置文件-YAML文件"><a href="#新建-CI-CD-配置文件-YAML文件" class="headerlink" title="新建 CI&#x2F;CD 配置文件(YAML文件)"></a>新建 CI&#x2F;CD 配置文件(YAML文件)</h3><p>在 hexo 博客项目根目录下新建 <code>.gitlab-ci.yml</code> 文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The Docker image that will be used to build your app</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">node:21.7.1</span></span><br><span class="line"><span class="comment"># Functions that should be executed before the build script is run</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="comment"># The folder that contains the files to be exposed at the Page URL</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="comment"># This ensures that only pushes to the default branch will trigger</span></span><br><span class="line">    <span class="comment"># a pages deploy</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_REF_NAME</span> <span class="string">==</span> <span class="string">$CI_DEFAULT_BRANCH</span></span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>从两个方面验证。</p>
<h4 id="验证-URL-访问"><a href="#验证-URL-访问" class="headerlink" title="验证 URL 访问"></a>验证 URL 访问</h4><p>浏览器输入URL：https:&#x2F;&#x2F;{username}.gitlab.io，我的仓库名称为 <code>maozzi.gitlab.io</code>，<br>则浏览器输入 <a href="https://maozzi.gitlab.io/">https://maozzi.gitlab.io</a>，</p>
<img src="/2018/10/14/blog/hexo-deploy-gitlab-pages/img_3.png" class="" title="img_3.png">

<h4 id="验证-gitlab-CI-CD-工作流"><a href="#验证-gitlab-CI-CD-工作流" class="headerlink" title="验证 gitlab CI&#x2F;CD 工作流"></a>验证 gitlab CI&#x2F;CD 工作流</h4><p>进入 gitlab ，maozzi.gitlab.io 仓库-&gt; 构建 -&gt; 流水线</p>
<img src="/2018/10/14/blog/hexo-deploy-gitlab-pages/img_4.png" class="" title="img_4.png">

<ul>
<li>如果为绿色，说明成功</li>
<li>如果为红色，说明失败，点击查看详情寻找错误原因</li>
</ul>
]]></content>
      <categories>
        <category>博客杂项</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2018/11/08/design-pattern/adapter/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul>
<li>将一个类的接口转换成希望的另一个接口，使接口兼容另一个类</li>
<li>模式组成<ol>
<li>目标角色</li>
<li>被适配角色</li>
<li>适配器角色</li>
</ol>
</li>
</ul>
<span id="more"></span>

<blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/mrkohaku/article/details/79087688">JAVA设计模式——适配器模式</a></li>
</ul>
</li>
<li>项目地址<ul>
<li><a href="https://gitee.com/maozzi/design-pattern.git">设计模式: 设计模式系统梳理</a></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/08/design-pattern/adapter/img.png" class="" title="img.png">

<h2 id="2种模式"><a href="#2种模式" class="headerlink" title="2种模式"></a>2种模式</h2><p>适配器模式可以分为：类适配器模式和对象适配器模式</p>
<h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comfortable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">comfort</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配者</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;猫 —&gt; 🐱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatAdapter</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Comfortable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">comfort</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 类适配</span></span><br><span class="line">        <span class="type">Comfortable</span> <span class="variable">catAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CatAdapter</span>();</span><br><span class="line">        catAdapter.comfort();</span><br><span class="line">        <span class="comment">//对象适配</span></span><br><span class="line">        <span class="type">Comfortable</span> <span class="variable">dogAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DogAdapter</span>(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        dogAdapter.comfort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogAdapter</span> <span class="keyword">implements</span> <span class="title class_">Comfortable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DogAdapter</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">comfort</span><span class="params">()</span> &#123;</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>类适配器使用的是继承的方式，直接继承了Adapter，<br>所以无法对Adapter的子类进行适配</li>
<li>对象适配器使用的是组合的方式，所以Adapter及其子孙类都可以被适配。<br>另外，对象适配器对于增加一些新行为非常方便，而且新增加的行为同时适用于所有的源</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2018/11/09/design-pattern/bridge/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>用于把抽象化与实现化解藕，使二者可以独立变化</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当一个类存在两个独立变化的维度时，为了减少因继承结构带来的具体类数量，<br>可将变化的维度进行抽象化，再用关联方式将其联系起来</p>
<span id="more"></span>

<blockquote>
<ul>
<li>参考资料</li>
<li><a href="https://www.cnblogs.com/WHL5/p/9186450.html">设计模式之结构型模式(一) - 博客园</a></li>
<li><a href="https://www.cnblogs.com/simpleito/p/10878865.html">设计模式 —— 结构型模式 - SimpleIto - 博客园</a></li>
<li><a href="https://www.jianshu.com/p/ae299a3bddc1">GOF23(java设计模式)–结构型模式 - 简书</a></li>
<li>项目地址<ul>
<li><a href="https://gitee.com/maozzi/design-pattern.git">设计模式: 设计模式系统梳理</a></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h2><img src="/2018/11/09/design-pattern/bridge/img.png" class="" title="img.png">

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Color</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 橘色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrangeColor</span> <span class="keyword">extends</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeColor</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 白色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhiteColor</span> <span class="keyword">extends</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WhiteColor</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OrangeCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Color color;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeCat</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小猫</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KittenCat</span> <span class="keyword">extends</span> <span class="title class_">OrangeCat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KittenCat</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成年猫</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdultCat</span> <span class="keyword">extends</span> <span class="title class_">OrangeCat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdultCat</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OrangeCat</span> <span class="variable">kittenCat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KittenCat</span>(<span class="keyword">new</span> <span class="title class_">OrangeColor</span>(<span class="string">&quot;橘色&quot;</span>));</span><br><span class="line">        <span class="type">OrangeCat</span> <span class="variable">kittenCat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KittenCat</span>(<span class="keyword">new</span> <span class="title class_">WhiteColor</span>(<span class="string">&quot;橘白相间的&quot;</span>));</span><br><span class="line">        <span class="type">OrangeCat</span> <span class="variable">adultCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdultCat</span>(<span class="keyword">new</span> <span class="title class_">WhiteColor</span>(<span class="string">&quot;橘白相间的&quot;</span>));</span><br><span class="line">        log.debug(<span class="string">&quot;kittenCat1 颜色： &quot;</span> + kittenCat1.getColor().getName());</span><br><span class="line">        log.debug(<span class="string">&quot;kittenCat2 颜色： &quot;</span> + kittenCat2.getColor().getName());</span><br><span class="line">        log.debug(<span class="string">&quot;adultCat 颜色： &quot;</span> + adultCat.getColor().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2018/11/12/design-pattern/builder/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;创建型设计模式</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>也称为生成器模式，将复杂对象的建造过程抽象出来，不同的实现方法可以构造不不同的属性的对象</p>
<p>当遇到这种许多构造器参数的时候，可以选用建造者模式</p>
<span id="more"></span>

<blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/ZhaoxiCheung/p/Java-Design-Patterns-Builder.html">Java设计模式—建造者模式(创建型模式)</a></li>
</ul>
</li>
<li>项目地址<ul>
<li><a href="https://gitee.com/maozzi/design-pattern.git">设计模式: 设计模式系统梳理</a></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/12/design-pattern/builder/img.png" class="" title="builder.png">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrangeCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="keyword">private</span> String foot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeCat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="string">&quot;head&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeCat</span><span class="params">(String name, String head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, head, <span class="string">&quot;body&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeCat</span><span class="params">(String name, String head, String body)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, head, body, <span class="string">&quot;foot&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeCat</span><span class="params">(String name, String head, String body, String foot)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">        <span class="built_in">this</span>.foot = foot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">head</span> <span class="operator">=</span> “head”;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> “body”;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">foot</span> <span class="operator">=</span> “foot”;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrangeCat <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrangeCat</span>(name, head, body, foot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CatBuilder <span class="title function_">create</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CatBuilder <span class="title function_">head</span><span class="params">(String head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CatBuilder <span class="title function_">body</span><span class="params">(String body)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CatBuilder <span class="title function_">foot</span><span class="params">(String foot)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.foot = foot;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2018/12/07/design-pattern/chain/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/jimoer/p/9480703.html">Java设计模式学习记录-责任链模式 - 纪莫 - 博客园</a></li>
<li><a href="https://www.jianshu.com/p/8f89120f030c">java设计模式——责任链模式 - 简书</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>为了避免请求的发送者和接收者之间的耦合关系，使多个接收对象都有机会处理请求。<br>将这些对象练成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/07/design-pattern/chain/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绘画接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawHead</span> <span class="keyword">implements</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Drawable drawable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawHead</span><span class="params">(Drawable drawable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.drawable = drawable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“DrawHead 画头部--<span class="string">&quot;);</span></span><br><span class="line"><span class="string">                drawable.draw();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Slf4j</span></span><br><span class="line"><span class="string">public class DrawBody implements Drawable &#123;</span></span><br><span class="line"><span class="string">    private Drawable drawable;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public DrawBody(Drawable drawable) &#123;</span></span><br><span class="line"><span class="string">        this.drawable = drawable;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public void draw() &#123;</span></span><br><span class="line"><span class="string">        log.debug(“DrawBody 画身体--&quot;</span>);</span><br><span class="line">                drawable.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawFoot</span> <span class="keyword">implements</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“DrawFoot 画脚 — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Drawable</span> <span class="variable">drawFoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawFoot</span>();</span><br><span class="line">        <span class="type">Drawable</span> <span class="variable">drawBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawBody</span>(drawFoot);</span><br><span class="line">        <span class="type">Drawable</span> <span class="variable">drawHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawHead</span>(drawBody);</span><br><span class="line">        drawHead.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2018/12/01/design-pattern/command/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/betterboyz/p/9377991.html">《JAVA设计模式》之命令模式(Command) - 博客园</a></li>
<li><a href="https://www.cnblogs.com/xiaobai1226/p/8651632.html">java设计模式——23、命令模式 - 高压锅里的小白 - 博客园</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>把一个请求或者操作封装到一个对象中以便使用不同的请求、队列或者日志来参数化其他对象</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/01/design-pattern/command/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“接受者”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CatCommand</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultCommand</span> <span class="keyword">implements</span> <span class="title class_">CatCommand</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;默认命令 -- &quot;</span>);</span><br><span class="line">        receiver.receive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CatCommand catCommand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Invoker</span><span class="params">(CatCommand catCommand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.catCommand = catCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“执行者”);</span><br><span class="line">        catCommand.command();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line">        <span class="type">CatCommand</span> <span class="variable">catCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultCommand</span>(receiver);</span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>(catCommand);</span><br><span class="line">        invoker.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/2018/11/12/design-pattern/composite/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/betterboyz/p/9356458.html">《JAVA设计模式》之组合模式(Composite)</a></li>
<li><a href="https://www.520mwx.com/view/41241">Java设计模式——组合模式 - 暮无雪代码博客</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>用来描述整体与部分的关系</p>
<p>可以使客户端将单纯元素与复合元素同等看待</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/12/design-pattern/composite/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Bird bird)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Bird bird)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parrot</span> <span class="keyword">extends</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;小鹦鹉 run -- &gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透明模式</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdjectiveComposite</span> <span class="keyword">extends</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bird&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children.add(bird);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children.remove(bird);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;AdjectiveComposite   run -- &gt;&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全模式</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecureComposite</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Animal&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“SecureComposite run — &gt;&gt;”);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children.add(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children.remove(animal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 透明模式 ，推荐</span></span><br><span class="line">        <span class="type">Parrot</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parrot</span>();</span><br><span class="line">        p1.add(p1);</span><br><span class="line">        p1.remove(p1);</span><br><span class="line">        p1.run();</span><br><span class="line">        <span class="type">AdjectiveComposite</span> <span class="variable">adjectiveComposite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdjectiveComposite</span>();</span><br><span class="line">        adjectiveComposite.add(p1);</span><br><span class="line">        adjectiveComposite.run();</span><br><span class="line">        <span class="comment">// 安全模式</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.run();</span><br><span class="line">        <span class="type">SecureComposite</span> <span class="variable">secureComposite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureComposite</span>();</span><br><span class="line">        secureComposite.add(cat);</span><br><span class="line">        secureComposite.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/2018/11/14/design-pattern/decorator/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/qq_38070608/article/details/80394652">Java设计模式—装饰者模式</a></li>
<li><a href="https://blog.csdn.net/qian520ao/article/details/82529890">Java设计模式——装饰者模式</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>动态地扩展对象的功能</p>
<p>提供了比继承更有弹性的替代方案</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/14/design-pattern/decorator/img.png" class="" title="img.png">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatWrapper</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CatWrapper</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        animal.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhiteWrapper</span> <span class="keyword">extends</span> <span class="title class_">CatWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WhiteWrapper</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.run();</span><br><span class="line">        log.debug(<span class="string">&quot;白色的猫猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrangeWrapper</span> <span class="keyword">extends</span> <span class="title class_">CatWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeWrapper</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.run();</span><br><span class="line">        log.debug(<span class="string">&quot;橘色的猫猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CatWrapper</span>(cat).run();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WhiteWrapper</span>(cat).run();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">OrangeWrapper</span>(cat).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2018/11/16/design-pattern/facade/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.runoob.com/w3cnote/facade-pattern-3.html">JAVA设计模式之门面模式（外观模式） | 菜鸟教程</a></li>
<li><a href="https://blog.csdn.net/u012361379/article/details/88820428">Java设计模式-外观模式</a></li>
<li><a href="https://blog.csdn.net/u013215018/article/details/81669962">JAVA设计模式之外观模式(六)</a></li>
<li><a href="https://www.cnblogs.com/fina1ly/p/9504351.html">java设计模式之外观模式（门面模式） - Fina1ly - 博客园</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>简化用户和子系统的交互<br>为子系统提供一个叫做外观的类，替代客户和子系统交互，该类负责和子系统交互</p>
<span id="more"></span>

<h2 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h2><img src="/2018/11/16/design-pattern/facade/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeAnimal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.run();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FacadeAnimal</span> <span class="variable">facadeAnimal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FacadeAnimal</span>();</span><br><span class="line">        facadeAnimal.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2018/11/17/design-pattern/factory/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;创建型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/michael_yt/article/details/82112443">工厂方法模式和抽象工厂模式</a></li>
</ul>
</li>
<li>项目地址<ul>
<li><a href="https://gitee.com/maozzi/design-pattern.git">设计模式: 设计模式系统梳理</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>用工厂方法代替 new 操作，让子类决定实例化哪个类，工厂方法将一个类的实例化延迟到子类</p>
<ul>
<li>优点<ul>
<li>解藕：调用方不用负责对象的创建，只需要使用，明确各自的职责</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="3种工厂模式"><a href="#3种工厂模式" class="headerlink" title="3种工厂模式"></a>3种工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;猫 —&gt; 🐱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;狗 —&gt; 🐶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleAnimalFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 简单工厂模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title function_">create</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                animal = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                animal = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单工厂模式</span></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">simpleCat</span> <span class="operator">=</span> SimpleAnimalFactory.create(<span class="number">1</span>);</span><br><span class="line">        simpleCat.run();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">simpleDog</span> <span class="operator">=</span> SimpleAnimalFactory.create(<span class="number">2</span>);</span><br><span class="line">        simpleDog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式跟简单工厂模式的区别在于简单工厂只有一个工厂类，提供了一个工厂方法，<br>由入参决定生产那个产品，而工厂模式则定义一个工厂接口，不同的产品工厂实现工厂接口，<br>生产的产品由产品工厂决定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">simpleCat</span> <span class="operator">=</span> CatFactory.create();</span><br><span class="line">        simpleCat.run();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">simpleDog</span> <span class="operator">=</span> DogFactory.create();</span><br><span class="line">        simpleDog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂就是一个工厂不单生产一个种类的产品，而是生产多个种类的产品，<br>也就是生产相关产品的产品家族</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbstractAnimalFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    Animal <span class="title function_">createCat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Animal <span class="title function_">createDog</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractAnimalFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Animal <span class="title function_">createCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Animal <span class="title function_">createDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂模式</span></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractFactory</span>();</span><br><span class="line">        factory.createCat().run();</span><br><span class="line">        factory.createDog().run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器模式</title>
    <url>/2018/11/22/design-pattern/filter/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.sxt.cn/design-pattern/intercepting_filter_pattern.html">Java拦截过滤器模式 - Java设计模式 | 速学堂教程 - 学的不仅是技术，更是梦想！—尚学堂旗下高端品牌</a></li>
<li><a href="https://blog.csdn.net/yanxilou/article/details/85953981">设计模式 过滤器模式</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来</p>
<p>结合多个标准来获得单一标准</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/22/design-pattern/filter/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrangeCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrangeCat</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“橘猫 run — &gt;&gt; “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlueCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlueCat</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“蓝猫 run — &gt;&gt; “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CatFilter</span> &#123;</span><br><span class="line">    List&lt;Cat&gt; <span class="title function_">filter</span><span class="params">(List&lt;Cat&gt; list)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultCatFilter</span> <span class="keyword">implements</span> <span class="title class_">CatFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Cat&gt; <span class="title function_">filter</span><span class="params">(List&lt;Cat&gt; list)</span> &#123;</span><br><span class="line">        List&lt;Cat&gt; orange = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.stream().map(cat -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (cat <span class="keyword">instanceof</span> OrangeCat) &#123;</span><br><span class="line">                orange.add(cat);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> orange;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFilter</span> <span class="keyword">implements</span> <span class="title class_">CatFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Cat&gt; <span class="title function_">filter</span><span class="params">(List&lt;Cat&gt; list)</span> &#123;</span><br><span class="line">        List&lt;Cat&gt; color = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.stream().map(cat -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (((OrangeCat) cat).getColor().equals(<span class="string">&quot;橘色&quot;</span>)) &#123;</span><br><span class="line">                color.add(cat);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OrangeCat</span> <span class="variable">orange1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrangeCat</span>(“橘色”);</span><br><span class="line">        <span class="type">OrangeCat</span> <span class="variable">orange2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrangeCat</span>(“橘色”);</span><br><span class="line">        <span class="type">OrangeCat</span> <span class="variable">orange3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrangeCat</span>(“橘白相间”);</span><br><span class="line">        <span class="type">BlueCat</span> <span class="variable">blue1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlueCat</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        <span class="type">BlueCat</span> <span class="variable">blue2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlueCat</span>(<span class="string">&quot;蓝黑色”);</span></span><br><span class="line"><span class="string">                List &lt; Cat &gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="string">        list.add(orange1);</span></span><br><span class="line"><span class="string">        list.add(orange2);</span></span><br><span class="line"><span class="string">        list.add(orange3);</span></span><br><span class="line"><span class="string">        list.add(blue1);</span></span><br><span class="line"><span class="string">        list.add(blue2);</span></span><br><span class="line"><span class="string">        List&lt;Cat&gt; filter = new DefaultCatFilter().filter(list);</span></span><br><span class="line"><span class="string">        List&lt;Cat&gt; color = new ColorFilter().filter(filter);</span></span><br><span class="line"><span class="string">        color.forEach(Cat::run);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2018/11/20/design-pattern/flyweight/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;结构型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.jianshu.com/p/ae299a3bddc1">GOF23(java设计模式)–结构型模式 - 简书</a></li>
<li><a href="https://www.cnblogs.com/adamjwh/p/9070107.html">简说设计模式——享元模式 - JAdam - 博客园</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>以共享的方式高效地支持大量细粒度对象的重用</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/20/design-pattern/flyweight/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“抽象鸟类—“);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;        <span class="comment">// 名字</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String color;       <span class="comment">// 颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Penguin</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;企鹅-- &quot;</span> + name + <span class="string">&quot;  &quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Bird&gt; pool = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bird <span class="title function_">getInstance</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pool.containsKey(name)) &#123;</span><br><span class="line">            bird = pool.get(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bird = <span class="keyword">new</span> <span class="title class_">Penguin</span>(name);</span><br><span class="line">            ((Penguin) bird).setColor(<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">            pool.put(name, bird);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bird;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pool.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">white</span> <span class="operator">=</span> FlyweightFactory.getInstance(“penguin”);</span><br><span class="line">        ((Penguin) white).setColor(<span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">orange</span> <span class="operator">=</span> FlyweightFactory.getInstance(<span class="string">&quot;penguin&quot;</span>);</span><br><span class="line">        ((Penguin) orange).setColor(<span class="string">&quot;橘色&quot;</span>);</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">king</span> <span class="operator">=</span> FlyweightFactory.getInstance(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;size: &quot;</span> + FlyweightFactory.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>中介模式</title>
    <url>/2018/12/19/design-pattern/mediator/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/weekstart/p/10890186.html">java设计模式-中介者模式 - 无影云 - 博客园</a></li>
<li><a href="https://blog.csdn.net/yangshuaionline/article/details/89917490">Java设计模式之中介者模式</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>使用中介者模式来集中相关对象之间复杂的沟通和控制方式，使得这些对象不必相互明显引用</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/19/design-pattern/mediator/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AnimalUse</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">food</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatUse</span> <span class="keyword">implements</span> <span class="title class_">AnimalUse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“公共玩具 — “);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">food</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“猫粮--<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 抽象中介者</span></span><br><span class="line"><span class="string">public interface AnimalMediator &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    void media(Animal animal);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 猫的中介</span></span><br><span class="line"><span class="string">public class CatMediator implements AnimalMediator &#123;</span></span><br><span class="line"><span class="string">    private AnimalUse animalUse;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public CatMediator(AnimalUse animalUse) &#123;</span></span><br><span class="line"><span class="string">        this.animalUse = animalUse;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public void media(Animal animal) &#123;</span></span><br><span class="line"><span class="string">        animal.run();</span></span><br><span class="line"><span class="string">        animalUse.food();</span></span><br><span class="line"><span class="string">        animalUse.play();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 客户端</span></span><br><span class="line"><span class="string">public class Client &#123;</span></span><br><span class="line"><span class="string">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="string">        Animal cat = new Cat();</span></span><br><span class="line"><span class="string">        Animal dog = new Dog();</span></span><br><span class="line"><span class="string">        AnimalUse catUse = new CatUse();</span></span><br><span class="line"><span class="string">        AnimalUse dogUse = new DogUse();</span></span><br><span class="line"><span class="string">        CatMediator catMediator = new CatMediator(catUse);</span></span><br><span class="line"><span class="string">        catMediator.media(cat);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/2018/12/27/design-pattern/memento/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/jimoer/p/9537997.html">Java设计模式学习记录-备忘录模式 - 纪莫 - 博客园</a></li>
<li><a href="https://www.jianshu.com/p/d84c213c2cda">Java设计模式——备忘录模式 - 简书</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>指在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/27/design-pattern/memento/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 备忘对象</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true, includeFieldNames = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MementoAnimal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MementoAnimal</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parrot</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parrot</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建备忘对象</span></span><br><span class="line">    <span class="keyword">public</span> MementoAnimal <span class="title function_">createMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MementoAnimal</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restore</span><span class="params">(MementoAnimal mementoAnimal)</span> &#123;</span><br><span class="line">        color = mementoAnimal.getColor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;小鹦鹉 -- &quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备忘管理类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MementoManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MementoAnimal mementoAnimal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Parrot</span> <span class="variable">parrot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parrot</span>(“黄色的”);</span><br><span class="line">        parrot.run();</span><br><span class="line">        <span class="type">MementoAnimal</span> <span class="variable">parrotMemento</span> <span class="operator">=</span> parrot.createMemento();</span><br><span class="line">        <span class="type">MementoManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MementoManager</span>();</span><br><span class="line">        manager.setMementoAnimal(parrotMemento);</span><br><span class="line">        log.error(<span class="string">&quot; 备份信息： &quot;</span> + manager.toString());</span><br><span class="line">        parrot.setColor(<span class="string">&quot;粉色的&quot;</span>);</span><br><span class="line">        parrot.run();</span><br><span class="line">        log.error(<span class="string">&quot; 备份信息： &quot;</span> + manager.toString());</span><br><span class="line">        parrot.restore(manager.getMementoAnimal());</span><br><span class="line">        parrot.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2018/12/14/design-pattern/observer/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/chengyuqiang/article/details/79222294">Java设计模式之观察者模式（发布&#x2F;订阅模式）</a></li>
<li><a href="https://www.cnblogs.com/luohanguo/p/7825656.html">JAVA设计模式之观察者模式 - 神仙果 - 博客园</a></li>
<li><a href="https://segmentfault.com/a/1190000014372254">Java设计模式之观察者模式详解 - - SegmentFault 思否</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>定义了一种一对多的依赖关系，一个主题对象可被多个观察者对象同时监听。<br>当这个主题对象状态变化时，会通知所有观察者对象并作出相应处理逻辑</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/14/design-pattern/observer/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 食物 抽象被观察者角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addAnimal</span><span class="params">(Animal animal)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteAnimal</span><span class="params">(Animal animal)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyAnimal</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫粮  具体被观察者角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatFood</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Animal&gt; animals = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAnimal</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> animals.add(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteAnimal</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> animals.remove(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAnimal</span><span class="params">()</span> &#123;</span><br><span class="line">        animals.forEach(animal -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">                animal.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CatFood</span>();</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        food.addAnimal(cat1);</span><br><span class="line">        food.addAnimal(cat2);</span><br><span class="line">        food.addAnimal(dog);</span><br><span class="line">        food.notifyAnimal();</span><br><span class="line">        food.deleteAnimal(cat1);</span><br><span class="line">        food.notifyAnimal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2018/11/18/design-pattern/prototype/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;创建型设计模式</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象 </p>
<ul>
<li>优点 <ul>
<li>高性能 -&gt; 原型模式是在内存二进制流中拷贝，要比直接 new 一个对象性能高</li>
</ul>
</li>
</ul>
<mark class="label [warning]">注意 -> 既是优点也是缺点，构造方法不会执行</mark>

<span id="more"></span>

<blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/zz_15127160921/article/details/81282140">java设计模式之原型模式</a></li>
</ul>
</li>
<li>项目地址<ul>
<li><a href="https://gitee.com/maozzi/design-pattern.git">设计模式: 设计模式系统梳理</a></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h2><img src="/2018/11/18/design-pattern/prototype/img.png" class="" title="prototype.png">

<h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浅拷贝</span></span><br><span class="line"><span class="comment"> * （1）JVM做了一个偷懒的拷贝动作,Object类提供的方法clone只是拷贝本对象,其对象内部的数组、引用对象等都不拷贝,还是指向原生对象的内部元素地址,这种拷贝就叫做浅拷贝</span></span><br><span class="line"><span class="comment"> *（2）非常不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlueCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> BlueCat <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (BlueCat) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, Serializable &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Color</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> * （1）深拷贝还有一种实现方式就是通过自己写二进制流来操作对象,然后实现对象的深拷贝,这个大家有时间自己实现一下</span></span><br><span class="line"><span class="comment"> * （2）深拷贝和浅拷贝建议不要混合使用,特别是在涉及类的继承时,父类有多个引用的情况就非常复杂,建议的方案是深拷贝和浅拷贝分开实现。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrangeCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, Serializable &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(“橘色”);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> OrangeCat <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">OrangeCat</span> <span class="variable">clone</span> <span class="operator">=</span> (OrangeCat) <span class="built_in">super</span>.clone();</span><br><span class="line">      clone.name = <span class="built_in">this</span>.name;</span><br><span class="line">      clone.color = (Color) <span class="built_in">this</span>.color.clone();</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 浅复制</span></span><br><span class="line">    <span class="type">BlueCat</span> <span class="variable">blueCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlueCat</span>();</span><br><span class="line">    blueCat.setName(<span class="string">&quot;蓝猫&quot;</span>);</span><br><span class="line">    <span class="type">BlueCat</span> <span class="variable">shallowCat</span> <span class="operator">=</span> blueCat.clone();</span><br><span class="line">    log.info(<span class="string">&quot;修改前：blueCat 名字： ---&gt; &quot;</span> + blueCat.getName());</span><br><span class="line">    log.info(<span class="string">&quot;修改前：blueCat 颜色：---&gt; &quot;</span> + blueCat.getColor().getName());</span><br><span class="line">    log.debug(<span class="string">&quot;修改前：shallowCat 名字： ---&gt; &quot;</span> + shallowCat.getName());</span><br><span class="line">    log.debug(<span class="string">&quot;修改前：shallowCat 颜色：---&gt; &quot;</span> + shallowCat.getColor().getName());</span><br><span class="line">    shallowCat.setName(<span class="string">&quot;蓝猫 -- Tom&quot;</span>);</span><br><span class="line">    shallowCat.getColor().setName(<span class="string">&quot;蓝猫 -- Tom&quot;</span>);</span><br><span class="line">    log.info(“修改后：blueCat 名字： ---&gt; “ + blueCat.getName());</span><br><span class="line">    log.info(“修改后：blueCat 颜色：—&gt; “ + blueCat.getColor().getName());</span><br><span class="line">    log.debug(“修改后：shallowCat 名字： ---&gt; <span class="string">&quot; + shallowCat.getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改后：shallowCat 颜色：---&gt; <span class="string">&quot; + shallowCat.getColor().getName());</span></span><br><span class="line"><span class="string">    // 深复制</span></span><br><span class="line"><span class="string">    OrangeCat orangeCat = new OrangeCat();</span></span><br><span class="line"><span class="string">    orangeCat.setName(&quot;</span>大橘<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    OrangeCat deepCat = orangeCat.clone();</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改前：orangeCat 名字： ---&gt; <span class="string">&quot; + orangeCat.getName());</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改前：orangeCat 颜色：---&gt; <span class="string">&quot; + orangeCat.getColor().getName());</span></span><br><span class="line"><span class="string">    log.debug(“修改前：deepCat 名字： ---&gt; “ + deepCat.getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改前：deepCat 颜色：---&gt; <span class="string">&quot; + deepCat.getColor().getName());</span></span><br><span class="line"><span class="string">    deepCat.setName(&quot;</span>橘肥<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    deepCat.getColor().setName(&quot;</span>橘肥<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改后：orangeCat 名字： ---&gt; <span class="string">&quot; + orangeCat.getName());</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改后：orangeCat 颜色：---&gt; <span class="string">&quot; + orangeCat.getColor().getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改后：deepCat 名字： ---&gt; <span class="string">&quot; + deepCat.getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改后：deepCat 颜色：---&gt; <span class="string">&quot; + deepCat.getColor().getName());</span></span><br><span class="line"><span class="string">    //系列化实现深复制</span></span><br><span class="line"><span class="string">    OrangeCat serializeCat = new OrangeCat();</span></span><br><span class="line"><span class="string">    serializeCat.setName(“序列化 — 大橘”);</span></span><br><span class="line"><span class="string">    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span></span><br><span class="line"><span class="string">    ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);</span></span><br><span class="line"><span class="string">    objectOutputStream.writeObject(serializeCat);</span></span><br><span class="line"><span class="string">    ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));</span></span><br><span class="line"><span class="string">    OrangeCat deepSerializeCat = (OrangeCat) objectInputStream.readObject();</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改前：serializeCat 名字： ---&gt; <span class="string">&quot; + serializeCat.getName());</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改前：serializeCat 颜色：---&gt; <span class="string">&quot; + serializeCat.getColor().getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改前：deepSerializeCat 名字： ---&gt; <span class="string">&quot; + deepSerializeCat.getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改前：deepSerializeCat 颜色：---&gt; <span class="string">&quot; + deepSerializeCat.getColor().getName());</span></span><br><span class="line"><span class="string">    deepSerializeCat.setName(&quot;</span>序列化 -- 橘肥<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    deepSerializeCat.getColor().setName(&quot;</span>序列化 -- 橘肥<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改后：serializeCat 名字： ---&gt; <span class="string">&quot; + serializeCat.getName());</span></span><br><span class="line"><span class="string">    log.info(&quot;</span>修改后：serializeCat 颜色：---&gt; <span class="string">&quot; + serializeCat.getColor().getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改后：deepSerializeCat 名字： ---&gt; <span class="string">&quot; + deepSerializeCat.getName());</span></span><br><span class="line"><span class="string">    log.debug(&quot;</span>修改后：deepSerializeCat 颜色：---&gt; <span class="string">&quot; + deepSerializeCat.getColor().getName());</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2018/12/24/design-pattern/proxy/</url>
    <content><![CDATA[<p>代理模式，使用代理对象来代替对真实对象(real object)的访问，<br>这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>
<p>代理模式的主要作用是扩展目标对象的功能。</p>
<p>代理模式主要分为2种：</p>
<ol>
<li>静态代理</li>
<li>动态代理</li>
<li>JDK 动态代理</li>
<li>CGLIB 动态代理</li>
</ol>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下编码运行环境：</span><br><span class="line">JDK17</span><br></pre></td></tr></table></figure>

<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理，是对目标对象的每个方法都手动编码加上增强功能的一种方式。</p>
<h3 id="🌰-举例子，实现步骤："><a href="#🌰-举例子，实现步骤：" class="headerlink" title="🌰 举例子，实现步骤："></a>🌰 举例子，实现步骤：</h3><ol>
<li>定义Animal接口，一个实现该接口的Cat类。</li>
<li>创建一个同样实现该接口的代理类，这里用了匿名内部类， 重写所有抽象方法<br>  以及增强的功能，规定传参类型，封装成工具类（ProxyUtil）。</li>
<li>调用代理工具类，传入目标对象参数（new Cat()）。Done！</li>
</ol>
<img src="/2018/12/24/design-pattern/proxy/img-1.png" class="">

<h3 id="Animal-接口"><a href="#Animal-接口" class="headerlink" title="Animal 接口"></a>Animal 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cat-目标类"><a href="#Cat-目标类" class="headerlink" title="Cat 目标类"></a>Cat 目标类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 猫</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ProxyUtil-代理工具类："><a href="#ProxyUtil-代理工具类：" class="headerlink" title="ProxyUtil 代理工具类："></a>ProxyUtil 代理工具类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理工具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title function_">staticProxy</span><span class="params">(Animal obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;proxy eat start&quot;</span>);</span><br><span class="line">                obj.eat();</span><br><span class="line">                System.out.println(<span class="string">&quot;proxy eat end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> ProxyUtil.staticProxy(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">        animal.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>静态代理，实现简单，但是需要手动给每一个目标类和每一个方法加上增强功能部分，<br>实在麻烦！😓</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理，相比静态代理则更加灵活，不需要一个个手动添加增强功能。</p>
<p><strong>JVM 角度， 动态代理是运行时动态生成字节码并加载到JVM中。</strong></p>
<h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h2><p>主要依赖JDK<code>java.lang.reflect.Proxy类，Proxy.newProxyInstance()方法</code>。</p>
<p>newProxyInstance方法有3个参数：</p>
<ol>
<li>ClassLoader loader, 目标对象的类加载器</li>
<li>Class&lt;?&gt;[] interfaces, 目标对象实现的接口数组</li>
<li>InvocationHandler h, 需要自定义实现，重写该接口中的<code>invoke</code>方法（增强功能部分）</li>
</ol>
<h3 id="🌰举例子，实现步骤"><a href="#🌰举例子，实现步骤" class="headerlink" title="🌰举例子，实现步骤"></a>🌰举例子，实现步骤</h3><ol>
<li>定义Animal接口，一个实现该接口的Cat类。同上<a href="#animal-%E6%8E%A5%E5%8F%A3">Animal 接口</a>。</li>
<li>使用Proxy.newProxyInstance()方法创建代理对象，InvocationHandler 参数<br>  使用匿名内部类， 重写invoke方法添加增强功能，规定传参类型，<br>  封装成工具类（ProxyUtil）。</li>
<li>调用代理工具类，传入目标对象参数（Cat.class）。Done！</li>
</ol>
<h3 id="ProxyUtil-代理工具类：-1"><a href="#ProxyUtil-代理工具类：-1" class="headerlink" title="ProxyUtil 代理工具类："></a>ProxyUtil 代理工具类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理工具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">jdk</span><span class="params">(Class&lt;T&gt; clz)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(</span><br><span class="line">                clz.getClassLoader(),</span><br><span class="line">                clz.getInterfaces(),</span><br><span class="line">                (proxy, method, args) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;jdk proxy start&quot;</span>);</span><br><span class="line">                    <span class="comment">// 使用newInstance方法</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(clz.getDeclaredConstructor().newInstance(), args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;jdk proxy end&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">o2</span> <span class="operator">=</span> ProxyUtil.jdk(Cat.class);</span><br><span class="line">        o2.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>JDK动态代理，查看源码得知，其实是生成一个继承Proxy类实现传入目标对象接口的代理子类，通过自定义InvocationHandler<br>拓展接口方法功能的方式。</p>
<p><strong>JDK动态代理，只能代理实现了接口的类。</strong></p>
<h2 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h2><p>主要依赖CGLIB库中，<code>Enhancer.create()</code>方法。</p>
<p>create方法有2个参数：</p>
<ol>
<li>Class type, 目标对象Class类型</li>
<li>Callback callback, 需要自定义实现，实现<code>intercept</code>方法（增强功能部分）</li>
</ol>
<h3 id="🌰举例子，实现步骤-1"><a href="#🌰举例子，实现步骤-1" class="headerlink" title="🌰举例子，实现步骤"></a>🌰举例子，实现步骤</h3><ol>
<li>定义Animal接口，一个实现该接口的Cat类。同上<a href="#animal-%E6%8E%A5%E5%8F%A3">Animal 接口</a>。</li>
<li>使用Enhancer.create()方法创建代理对象，Callback 参数使用匿名内部类，<br>  重写intercept方法添加增强功能，规定传参类型， 封装成工具类（ProxyUtil）。</li>
<li>调用代理工具类，传入目标对象参数（Cat.class）。Done！</li>
</ol>
<h3 id="ProxyUtil-代理工具类：-2"><a href="#ProxyUtil-代理工具类：-2" class="headerlink" title="ProxyUtil 代理工具类："></a>ProxyUtil 代理工具类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理工具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">cglib</span><span class="params">(Class&lt;T&gt; clz)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Enhancer.create(clz,</span><br><span class="line">                (MethodInterceptor) (obj, method, args, proxy) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;cglib proxy start &quot;</span> + method.getName());</span><br><span class="line">                    <span class="comment">// 使用invokeSuper方法</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> proxy.invokeSuper(obj, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;cglib proxy end &quot;</span> + method.getName());</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试：-2"><a href="#测试：-2" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">o5</span> <span class="operator">=</span> ProxyUtil.cglib(Cat.class);</span><br><span class="line">        o5.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>CGLIB动态代理，是通过生成一个目标对象的子类，对方法调用进行拦截。</p>
<p><strong>CGLIB动态代理，可以代理类（甚至抽象类），不管该类是否实现接口。</strong></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2018/11/28/design-pattern/singleton/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;创建型设计模式</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>采用一定的方法保证在整个软件系统中，一个类只能存在一个对象实例，<br>并且该类只提供一个访问其对象实例的方法(静态方法)。</p>
<p>⚠️<strong>注意</strong></p>
<ul>
<li>单例类只能有一个实例</li>
<li>单例类必须自己创建自己唯一实例</li>
<li>单例类必须给所有其他对象提供这一实例</li>
</ul>
<span id="more"></span>

<blockquote>
<ul>
<li>参考资料</li>
<li><a href="https://blog.csdn.net/jatej/article/details/91882827">java设计模式之单例模式</a></li>
<li>项目地址</li>
<li><a href="https://gitee.com/maozzi/design-pattern.git">设计模式: 设计模式系统梳理</a></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungryCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">HungryCat</span> <span class="variable">hungryCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungryCat</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungryCat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;饥饿的猫猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.饿汉模式(静态常量)</span></span><br><span class="line"><span class="comment">     * 优缺点：</span></span><br><span class="line"><span class="comment">     * 优点：写法简单，就是在类加载时候直接完成实例化，避免线程同步问题</span></span><br><span class="line"><span class="comment">     * 缺点：没有达到懒加载的效果，如果该类从始至终都没有使用，会造成内存浪费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungryCat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hungryCat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyCat lazyCat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyCat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;懒懒的猫猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.懒汉单例模式(非同步)</span></span><br><span class="line"><span class="comment">     * 优缺点：</span></span><br><span class="line"><span class="comment">     * 优点：有懒加载效果</span></span><br><span class="line"><span class="comment">     * 缺点：线程不安全，只适合单线程使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyCat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyCat == <span class="literal">null</span>) &#123;</span><br><span class="line">            lazyCat = <span class="keyword">new</span> <span class="title class_">LazyCat</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyCat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法1</span></span><br><span class="line"><span class="comment">     * 使用synchronized将整个方法同步</span></span><br><span class="line"><span class="comment">     * 但同步整个方法在高并发的情况下会造成阻塞效率低下</span></span><br><span class="line"><span class="comment">     * 不推荐使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazyCat <span class="title function_">getSyncInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyCat == <span class="literal">null</span>) &#123;</span><br><span class="line">            lazyCat = <span class="keyword">new</span> <span class="title class_">LazyCat</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyCat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法2</span></span><br><span class="line"><span class="comment">     * 使用synchronized同步该单例的代码块；但该方法不能完全实现同步，可能会产生多个实例；</span></span><br><span class="line"><span class="comment">     * 例如：在第一次创建时多个线程同时进入if(lazySingleton == null) 则会产生多个实例</span></span><br><span class="line"><span class="comment">     * 不推荐使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyCat <span class="title function_">getSyncSuperiorInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyCat == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyCat.class) &#123;</span><br><span class="line">                lazyCat = <span class="keyword">new</span> <span class="title class_">LazyCat</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyCat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法3</span></span><br><span class="line"><span class="comment">     * 双重检查法,同步代码块中再次检查一次是否w为null解决了上述问题   		* 推荐使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyCat <span class="title function_">getSyncAdvanceInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyCat == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyCat.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyCat == <span class="literal">null</span>) &#123;</span><br><span class="line">                    lazyCat = <span class="keyword">new</span> <span class="title class_">LazyCat</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyCat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassCat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“内部的猫猫”);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.内部类模式</span></span><br><span class="line"><span class="comment">     * 优点：采用了类加载机制来保证初始化实例只有一个线程，懒加载，效率高</span></span><br><span class="line"><span class="comment">     * 推荐使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassCat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.innerClassCat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InnerClassCat</span> <span class="variable">innerClassCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassCat</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.枚举模式</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CarBean</span> &#123;</span><br><span class="line">    carBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2018/12/07/design-pattern/state/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/betterboyz/p/9378068.html">《JAVA设计模式》之状态模式(State) - betterboyz - 博客园</a></li>
<li><a href="https://www.cnblogs.com/xyzq/p/11090344.html">JAVA设计模式：状态模式 - 新宇泽起 - 博客园</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>允许一个对象在其内部状态改变的时候改变其行为对象行为的变化是由于状态的变化引入，<br>那么即当内部状态发生变化的时候，就会改变对象的行为，而这种改变视乎就改变了整个类</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/07/design-pattern/state/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象状态接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CatState</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态角色</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultState</span> <span class="keyword">implements</span> <span class="title class_">CatState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“默认状态 — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态角色</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorState</span> <span class="keyword">implements</span> <span class="title class_">CatState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“颜色状态 — “);</span><br><span class="line">        log.debug(“猫的毛色 — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境角色</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CatState catState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        <span class="comment">// 根绝Cat 的不同返回不同的CatState</span></span><br><span class="line">        catState = <span class="keyword">new</span> <span class="title class_">DefaultState</span>();</span><br><span class="line">        catState.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CatContext</span> <span class="variable">catContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CatContext</span>();</span><br><span class="line">        catContext.handle(<span class="keyword">new</span> <span class="title class_">Cat</span>());<span class="comment">// 作为判断条件，最好是Cat的具体实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2018/11/24/design-pattern/strategy/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="http://baijiahao.baidu.com/s?id=1601547440739500969&wfr=spider&for=pc">Java设计模式之策略模式详解</a></li>
<li><a href="https://www.cnblogs.com/xuwujing/p/9954263.html">Java进阶篇设计模式之十一 —— 策略模式和模板方法模式 - 虚无境 - 博客园</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>定义一组算法,将每个算法都封装起来,并且使它们之间可以互换</p>
<p>最大特点是使得算法可以在不影响客户端的情况下发生变化，从而改变不同的功能</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/11/24/design-pattern/strategy/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象策略角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CatStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultStrategy</span> <span class="keyword">implements</span> <span class="title class_">CatStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“默认策略 — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorStrategy</span> <span class="keyword">implements</span> <span class="title class_">CatStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“颜色策略 — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境角色</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CatStrategy catStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CatContext</span><span class="params">(CatStrategy catStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.catStrategy = catStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">context</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“环境角色 — <span class="string">&quot;);</span></span><br><span class="line"><span class="string">                catStrategy.execute();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 客户端</span></span><br><span class="line"><span class="string">public class Client &#123;</span></span><br><span class="line"><span class="string">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="string">        CatContext defaultContext = new CatContext(new DefaultStrategy());</span></span><br><span class="line"><span class="string">        defaultContext.context();</span></span><br><span class="line"><span class="string">        CatContext colorContext = new CatContext(new DefaultStrategy());</span></span><br><span class="line"><span class="string">        colorContext.context();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/2018/11/24/design-pattern/template/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/u012361379/article/details/88820544">Java设计模式-模板方法模式</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</p>
<span id="more"></span>

<h2 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h2><img src="/2018/11/24/design-pattern/template/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CatTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        step1();</span><br><span class="line">        step2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">step1</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“CatTemplate step <span class="number">1</span> — “);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">step2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultTemplate</span> <span class="keyword">extends</span> <span class="title class_">CatTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">step2</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(“DefaultTemplate step <span class="number">2</span> — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CatTemplate</span> <span class="variable">catTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultTemplate</span>();</span><br><span class="line">        catTemplate.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/2018/12/27/design-pattern/visitor/</url>
    <content><![CDATA[<blockquote>
<p>设计模式&#x2F;行为型设计模式</p>
</blockquote>
<ul>
<li>参考资料<ul>
<li><a href="https://www.cnblogs.com/betterboyz/p/9378093.html">《JAVA设计模式》之访问者模式(Visitor) - betterboyz - 博客园</a></li>
</ul>
</li>
</ul>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，<br>接受这个操作的数据结构则可以保持不变</p>
<span id="more"></span>

<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><img src="/2018/12/27/design-pattern/visitor/img.png" class="">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(Animal animal)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatFood</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.run();</span><br><span class="line">        log.debug(“猫粮 — “);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构对象 环境</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Food&gt; foods = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Food food)</span> &#123;</span><br><span class="line">        foods.add(food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        foods.forEach(food -&gt; food.eat(animal));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">catFood1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CatFood</span>();</span><br><span class="line">        <span class="type">Food</span> <span class="variable">catFood2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CatFood</span>();</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">        context.add(catFood1);</span><br><span class="line">        context.add(catFood2);</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        context.visit(cat);</span><br><span class="line">        context.visit(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>国内 Docker Hub 镜像源停服后自救方式</title>
    <url>/2024/07/29/docker/custom-docker-hub-image/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 Docker 时，如果默认使用 Docker 官方镜像源的话，拉取镜像是很慢的，<br>同时访问 Docker Hub 也是基本进不去的，需要走代理。</p>
<p>所以我们一般会使用国内 Docker Hub 镜像源。</p>
<p>但是最近拉取镜像时都是失败，报 <code>Pulling fs layer</code> 错误或者<br><code>error pulling image configuration: download failed after attempts=6: EOF</code><br>错误，对我造成极大的困扰。</p>
<img src="/2024/07/29/docker/custom-docker-hub-image/img.png" class="" title="img.png">

<p>刚开始时，还以为 Docker Desktop 出现问题，查看日志，原来是镜像服务不能用😓</p>
<span id="more"></span>

<p>然后找各种国内镜像，发现都少数几个勉强可以使用外，其他都阵亡。</p>
<p>网上一查，原来国内的 Docker Hub 镜像源因为某些原因，自从6月以来<br>已经陆续开始停止提供服务。</p>
<img src="/2024/07/29/docker/custom-docker-hub-image/img_1.png" class="" title="img_1.png">

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>目前的形式，两种解决方案：</p>
<ol>
<li>继续使用可用的国内 Docker Hub 镜像源，但是不排除后续会停止服务</li>
<li>自建 Docker Hub 镜像源</li>
</ol>
<h3 id="可用的国内镜像源"><a href="#可用的国内镜像源" class="headerlink" title="可用的国内镜像源"></a>可用的国内镜像源</h3><p>目前勉强可以使用的镜像源</p>
<table>
<thead>
<tr>
<th align="center">镜像源名称</th>
<th align="center">镜像URL</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DaoCloud</td>
<td align="center"><a href="https://docker.m.daocloud.io/">https://docker.m.daocloud.io</a></td>
</tr>
<tr>
<td align="center">AtomHub</td>
<td align="center"><a href="https://hub.atomgit.com/">https://hub.atomgit.com</a></td>
</tr>
</tbody></table>
<h3 id="自建-Docker-Hub-镜像源"><a href="#自建-Docker-Hub-镜像源" class="headerlink" title="自建 Docker Hub 镜像源"></a>自建 Docker Hub 镜像源</h3><blockquote>
<p>⚠️⚠️⚠️仅限自用⚠️⚠️⚠️</p>
</blockquote>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li><code>Cloudflare</code> 账号，没有的账号则需要注册，<code>Pages</code> 是免费的，Cloudflare：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com</a></li>
<li>需要使用项目中 <code>_worker.js</code>，项目地址：<a href="https://gitee.com/maozzi/maozzi-docker">https://gitee.com/maozzi/maozzi-docker</a></li>
</ol>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>假设已完成准备工作，已有<code>Cloudflare</code> 账号，同时已下载<code>_worker.js</code>并压缩成 <code>_worker.zip</code>。</p>
<ol>
<li>进入Cloudflare：<a href="https://dash.cloudflare.com,点击左侧导航栏,`workers/">https://dash.cloudflare.com，点击左侧导航栏，`Workers</a> 和 Pages&#96;  <img src="/2024/07/29/docker/custom-docker-hub-image/img_2.png" class="" title="img_2.png"></li>
<li>点击新建 Pages，点击上传资产，输入项目名称，上传<code>_worker.zip</code>文件，最后点击部署站点。  <img src="/2024/07/29/docker/custom-docker-hub-image/img_3.png" class="" title="img_3.png">
  <img src="/2024/07/29/docker/custom-docker-hub-image/img_4.png" class="" title="img_4.png">
  <img src="/2024/07/29/docker/custom-docker-hub-image/img_5.png" class="" title="img_5.png"></li>
<li>当出现成功页面，则部署成功🎉🎉🎉，点击访问试试，<a href="https://test-docker.pages.dev/">https://test-docker.pages.dev</a><br>  熟悉的 <code>Docker Hub</code> 页面！！！  <img src="/2024/07/29/docker/custom-docker-hub-image/img_6.png" class="" title="img_6.png">
  <img src="/2024/07/29/docker/custom-docker-hub-image/img_7.png" class="" title="img_7.png"></li>
</ol>
<p>到这里基本就结束了，我们可以使用这个URL <a href="https://test-docker.pages.dev,试一试/">https://test-docker.pages.dev，试一试</a><br><code>docker</code> 拉取镜像或者配置在 <code>daemon.json</code> 配置文件 <code>registry-mirrors</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull test-docker.pages.dev/nginx</span><br></pre></td></tr></table></figure>

<img src="/2024/07/29/docker/custom-docker-hub-image/img_8.png" class="" title="img_8.png">

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://test-docker.pages.de&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/cmliu/CF-Workers-docker.io.git">https://github.com/cmliu/CF-Workers-docker.io.git</a></p>
<p>🎉🎉🎉快去试一试吧！！！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI 和 TCP/IP 网络模型</title>
    <url>/2019/06/27/network/osi-model-and-tcp-ip-model/</url>
    <content><![CDATA[<h2 id="网络术语"><a href="#网络术语" class="headerlink" title="网络术语"></a>网络术语</h2><h3 id="节点（node）"><a href="#节点（node）" class="headerlink" title="节点（node）"></a>节点（node）</h3><p>节点是连接到网络的物理电子设备，比如电脑、打印机、路由器等等。<br>如果配置正确的话，节点可以在网络上进行信息的收发。</p>
<p>节点可以彼此相邻，其中的节点 A 可以直接连接到节点 B。<br>节点之间也可以有中间节点，例如节点 A 和节点 B 之间可以放置一个交换机或路由器。</p>
<span id="more"></span>

<p>通常，路由器将网络连接到因特网，而交换机运行在网络内部，促进内网通信。</p>
<h3 id="链路（link）"><a href="#链路（link）" class="headerlink" title="链路（link）"></a>链路（link）</h3><p>链路连接网络中的节点，它可以是有线的，比如以太网，也可以是无线的，比如 WiFi。</p>
<p>链路要么是点对点的（节点A与节点B相连，要么是多点的（节点A与节点B和节点C相连）。</p>
<h3 id="协议（protocol）"><a href="#协议（protocol）" class="headerlink" title="协议（protocol）"></a>协议（protocol）</h3><p>协议是一组相互商定的规则，允许网络中的两个节点交换数据。</p>
<h3 id="网络（network）"><a href="#网络（network）" class="headerlink" title="网络（network）"></a>网络（network）</h3><p>网络是一组计算机、打印机或任何其它想要共享数据的设备的通用术语。</p>
<p>网络的类型包括：LAN、HAN、CAN、MAN、WAN、BAN 或 VPN。</p>
<h3 id="拓扑（topology）"><a href="#拓扑（topology）" class="headerlink" title="拓扑（topology）"></a>拓扑（topology）</h3><p>拓扑描述的是节点和链路如何在网络配置中组合在一起，通常用图描述。</p>
<h3 id="层（layer）"><a href="#层（layer）" class="headerlink" title="层（layer）"></a>层（layer）</h3><p>层是对网络上的功能和行为进行分类和分组的一种方式。</p>
<p>每一层都抽象低层的功能，直到最高层为止。<br>最终用户是看不到所有其它层的所有细节和内部运作的。</p>
<h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><p>OSI 七层模型 是国际标准化组织提出一个网络分层模型，是一个描述网络功能的概念框架。</p>
<p>简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。如图：</p>
<img src="/2019/06/27/network/osi-model-and-tcp-ip-model/img.png" class="">

<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>为用户提供服务，各种应用程序协议。如：HTTP、FTP、SMTP、POP3等。</p>
<h3 id="展示层"><a href="#展示层" class="headerlink" title="展示层"></a>展示层</h3><p>数据处理，如：数据的加密&#x2F;解密、编码&#x2F;解码、压缩&#x2F;解压缩</p>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>管理（建立、维护、重连）应用程序间的会话</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>接收上一层的数据，将数据进行拆分，并且保证将数据有效传递给下一层。</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>路由与寻址，决定数据在网络传输的路径&#x2F;转发</p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>物理寻址，帧编码和误差纠正控制</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>比特流传输</p>
<h2 id="TCP-IP-四层模型"><a href="#TCP-IP-四层模型" class="headerlink" title="TCP&#x2F;IP 四层模型"></a>TCP&#x2F;IP 四层模型</h2><p>TCP&#x2F;IP 四层模型是目前被广泛采用的一种模型,我们可以将TCP&#x2F;IP模型看作是OSI七层模型的精简版本，<br>由以下 4 层组成：</p>
<img src="/2019/06/27/network/osi-model-and-tcp-ip-model/img_1.png" class="">

<h3 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h3><p>主要提供两个终端设备上的应用程序之间信息交换的服务，它定义了信息交换的格式，<br>消息会交给下一层传输层来传输。</p>
<p>常见协议：HTTP、FTP、SMTP、POP3、IMAP、SSH、DNS</p>
<h3 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h3><p>负责向两台设备进程之间提供数据通信。</p>
<p>常见协议：TCP、UDP</p>
<h3 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h3><p>为分组交换网上不同的主机提供通信服务。</p>
<p>常见协议：IP、ARP、ICMP、NET</p>
<h3 id="物理接口层"><a href="#物理接口层" class="headerlink" title="物理接口层"></a>物理接口层</h3><p>将网络层的ip数据包组成帧，在相邻节点间传递。每一帧包括数据和控制信息。</p>
<p>常见协议：MAC</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>网络模型</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP 与 UDP</title>
    <url>/2019/06/29/network/tcp-and-udp/</url>
    <content><![CDATA[<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP(Transmission Control Protocol，传输控制协议)，属于传输层协议，<br>提供面向连接的，可靠的数据传输服务。</p>
<h3 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h3><p>TCP 是面向连接的协议，为了准确无误地把数据送达目标处，<br>TCP 协议采用了三次握手策略和四次挥手策略。</p>
<span id="more"></span>

<h4 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h4><img src="/2019/06/29/network/tcp-and-udp/img.png" class="" title="img.png">

<p>左边为客户端（client），右边为服务器端（server）。</p>
<ul>
<li>SYN：同步序列编号(Synchronize Sequence Numbers)是建立连接时使用的握手信号。</li>
<li>ACK：消息响应(Acknowledgement)是对SYN消息的响应。</li>
<li>seq：包序列号。</li>
<li>ack：确认信息。</li>
</ul>
<p>建立一个tcp连接，三次握手步骤如图：</p>
<ol>
<li>第一次握手：客户端向服务器发起一个连接请求，请求中携带SYN(seq&#x3D;x)标志的数据包，<br>  然后客户端进入SYN_SEND状态，等待服务端的确认。这一步，服务端可以确认自身接收功能<br>  正常，客户端发送功能正常；</li>
<li>第二次握手：服务端接收到客户端的连接请求后，向客户端发送一个确认连接响应，响应中携带<br>  SYN+ACK(seq&#x3D;y,ack&#x3D;x+1)数据包，然后服务器进入SYN_RECV状态。这一步客户端可以确认<br>  自身和服务端发送接收功能都正常</li>
<li>第三次握手：客户端接收到服务端发送的确认连接响应后，向服务端发送一个确认响应，响应中携带<br>  ACK(ack&#x3D;y+1)数据包，然后客户端和服务端都进入ESTABLISHED状态。<br>  这一步服务端可以确认客户端接收功能正常，自身发送接收功能正常</li>
</ol>
<h4 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h4><img src="/2019/06/29/network/tcp-and-udp/img_1.png" class="" title="img_1.png">

<p>左边为客户端（client），右边为服务器端（server）。</p>
<ul>
<li>FIN：结束(FINISH)是连接结束挥手信号。</li>
<li>ACK：消息响应(Acknowledgement)是对FIN消息的响应。</li>
<li>seq：包序列号。</li>
<li>ack：确认信息。</li>
</ul>
<p>已建立的连接在结束时，四次挥手步骤如图：</p>
<ol>
<li>第一次挥手：客户端向服务端发送一个带有FIN(seq&#x3D;x)的数据包，表示要关闭现有连接，然后<br>  客户端进入FIN-WAIT-1状态</li>
<li>第二次挥手：服务端接收到FIN标志数据包后，会发送一个ACK(ack&#x3D;x+1)标志的数据包，表示确认<br>  收到，然后服务端进入CLOSE-WAIT状态，客户接收到后进入FIN-WAIT-2状态</li>
<li>第三次挥手：服务端向客户端发送一个带有FIN(seq&#x3D;y)标志数据包，然后进入LAST-ACK状态</li>
<li>第四次挥手：客户端接收到后，发送一个ACK(ack&#x3D;y+1)标志数据包，进入TIME-WAIT状态。<br>  服务端接收ACK(ack&#x3D;y+1)数据包后，进入CLOSE状态。此时客户端等待2MSL后依然没有收到<br>  回复说明服务端已正常关闭，客户端也关闭连接</li>
</ol>
<h3 id="TCP-如何保证可靠性"><a href="#TCP-如何保证可靠性" class="headerlink" title="TCP 如何保证可靠性"></a>TCP 如何保证可靠性</h3><p>TCP是面向连接的，可靠的数据传输协议。那么是如何保证数据传输可靠呢？</p>
<ol>
<li>基于数据块传输。数据会被切割成合适大小进行传输。</li>
<li>对失序数据包进行重排与去重。TCP给每一个数据块设置一个序列号，可以根据序列号排序以及去重</li>
<li>校验和。TCP会根据数据包header和携带数据进行校验和，用于保证传输过程中的可靠</li>
<li>重传机制。TCP在丢包或者网络延迟情况，会重新发送数据包直到接收端确认。常见重传机制：<ol>
<li>基于计时器重传机制（超时重传）</li>
<li>基于接收端反馈信息重传机制（快速重传）</li>
<li>基于快速重传，同时返回最近接收的序列号范围（SACK重传）</li>
<li>基于SACK重传，同时返回数据包重复序列号（D-SACK重传）</li>
</ol>
</li>
<li>流量控制。TCP连接有固定的缓冲区，当超出缓冲区容纳范围会提示发送方降低发送速率，防止丢包。<br>  TCP是利用可变大小的滑动窗口实现流量控制</li>
<li>拥塞控制。拥塞控制是为了防止过多数据注入网络中，导致网络链路过载。TCP维护一个拥塞窗口状态<br>  变量来动态控制拥塞程度，提供4中算法：<ol>
<li>慢开始。由小到大依次增大拥塞窗口数值，来探测网络情况。每经过一次传播轮次，拥塞窗口数值加倍</li>
<li>拥塞避免。拥塞窗口缓慢增大，每经过一个RTT，拥塞窗口加1</li>
<li>快重传与快恢复。接收方如果接收到一个失序数据包，立即给发送方一个重复确认，如果发送方接收<br>  3个重复确认则会认为该数据包已丢失并立即重传丢失数据包。</li>
</ol>
</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>TCP 用于对传输准确性要求特别高的场景，比如文件传输、发送和接收邮件、远程登录等等。</p>
<p>常见协议：HTTP协议、FTP协议、SMTP协议、SSH协议</p>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP（User Datagram Protocol）是为应用程序提供一种以最少的协议机制向其他程序发送消息的协议。<br>其主要特点是无连接，不保证可靠传输和面向报文。属于传输层的协议</p>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>UDP 一般用于即时通信，比如：语音、 视频、直播等等。</p>
<p>常见协议：DNS协议、DHCP协议</p>
<h2 id="TCP-与-UDP-比较"><a href="#TCP-与-UDP-比较" class="headerlink" title="TCP 与 UDP 比较"></a>TCP 与 UDP 比较</h2><table>
<thead>
<tr>
<th></th>
<th align="center">TCP</th>
<th align="center">UDP</th>
</tr>
</thead>
<tbody><tr>
<td>是否面向连接</td>
<td align="center">是</td>
<td align="center">否</td>
</tr>
<tr>
<td>是否可靠</td>
<td align="center">是</td>
<td align="center">否</td>
</tr>
<tr>
<td>是否有状态</td>
<td align="center">是</td>
<td align="center">否</td>
</tr>
<tr>
<td>传输效率</td>
<td align="center">较慢</td>
<td align="center">较快</td>
</tr>
<tr>
<td>传输形式</td>
<td align="center">字节流</td>
<td align="center">数据报文段</td>
</tr>
<tr>
<td>首部开销</td>
<td align="center">20 ～ 60 bytes</td>
<td align="center">8 bytes</td>
</tr>
<tr>
<td>是否提供广播或多播服务</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
</tbody></table>
<h2 id="ARQ-协议"><a href="#ARQ-协议" class="headerlink" title="ARQ 协议"></a>ARQ 协议</h2><p>自动重传请求（Automatic Repeat-reQuest，ARQ）是 OSI 模型中数据链路层<br>和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，<br>在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内<br>没有收到确认信息（Acknowledgements，就是我们常说的 ACK），它通常会重新发送，<br>直到收到确认或者重试超过一定的次数。</p>
<h3 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a>停止等待ARQ协议</h3><p>基本原理就是每发完一个分组就停止发送，等待对方确认（回复 ACK）。<br>如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，<br>需要重新发送，直到收到确认后再发下一个分组；<br>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。</p>
<h4 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h4><p>是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组<br>丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组<br>传输的平均往返时间更长一些</p>
<ul>
<li><strong>确认丢失</strong>：接收方在接收到数据后发送的确认消息丢失，接收方超时重传一遍该数据包，导致<br>  接收方接收到两份一样的数据包，接收方会采取2种措施：<ol>
<li>丢弃该多余重复数据包</li>
<li>向发送方发送确认消息</li>
</ol>
</li>
<li><strong>确认迟到</strong>：由于网络延迟等问题导致确认消息迟到，接收方超时重传一遍该数据包，导致<br>  接收方接收到两份一样的数据包，同时接收方随后接收到重复确认消息。处理方式：<ol>
<li>发送方直接丢弃多余重复确认消息</li>
<li>接收方直接丢弃多余重复数据包</li>
</ol>
</li>
</ul>
<h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>连续ARQ协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以<br>连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组<br>发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>
<ul>
<li>优点： 信道利用率高，容易实现，即使确认丢失，也不必重传。</li>
<li>缺点： 不能向发送方反映出接收方已经正确收到的所有分组的信息。<ul>
<li>比如：发送方发送了 5 条 消息，中间第三条丢失（3 号），这时接收方只能对前两个<br>  发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。<br>  这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</li>
</ul>
</li>
</ul>
<h3 id="超时重传原理"><a href="#超时重传原理" class="headerlink" title="超时重传原理"></a>超时重传原理</h3><p>当发送方发送数据之后，它启动一个<mark class="label danger">定时器</mark>，等待目的端确认收到这个报文段。</p>
<p>接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的<br>往返时延（RTT）内未收到确认消息，那么对应的数据包就被假设为已丢失并进行重传。</p>
<ul>
<li>RTT（Round Trip Time）：往返时间，也就是数据包从发出去到收到对应 ACK 的时间。</li>
<li>RTO（Retransmission Time Out）：重传超时时间，即从数据发送时刻算起，<br>  超过这个时间便执行重传。RTT 的值会随着网络的波动而变化，如加权移动平均算法，<br>  Jacobson 算法等，这些算法都是根据RTT的测量和变化来估计RTO的值。</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>tcp</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>爬楼梯系列篇</title>
    <url>/2024/03/20/algorithm/dp/climb-stair/</url>
    <content><![CDATA[<h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/description/">Leetcode题目链接：70. 爬楼梯</a></p>
<h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>动态规划五部曲</p>
<ol>
<li>定义dp[i]：表示踏上第i台阶有dp[i]种方法。<ol>
<li>dp[i-1]表示踏上第i-1台阶有dp[i-1]种方法，那么只要再踏上1步就是第i台阶</li>
<li>dp[i-2]表示踏上第i-1台阶有dp[i-2]种方法，那么只要再踏上2步就是第i台阶</li>
</ol>
</li>
<li>确定dp状态转移方程。  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp[i] = dp[i-1] + dp[i-2]</span><br></pre></td></tr></table></figure></li>
<li>初始化dp数组。<ol>
<li>dp[0]表示踏上第0台阶（那就是地面咯），所以dp[0]&#x3D;1</li>
<li>dp[1]表示踏上第1台阶，所以dp[1]&#x3D;1</li>
</ol>
</li>
<li>确定for循环长度、顺序、开始位置。<ol>
<li>遍历长度为n</li>
<li>正序遍历</li>
<li>开始位置为2</li>
</ol>
</li>
<li>举例推导dp数组</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用最小花费爬楼梯"><a href="#使用最小花费爬楼梯" class="headerlink" title="使用最小花费爬楼梯"></a>使用最小花费爬楼梯</h2><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/description/">Leetcode题目链接：746. 使用最小花费爬楼梯</a></p>
<p>给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。<br>一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p>
<p>你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</p>
<p>请你计算并返回达到楼梯顶部的最低花费。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：cost = [10,15,20]</span><br><span class="line">输出：15</span><br><span class="line">解释：你将从下标为 1 的台阶开始。</span><br><span class="line">- 支付 15 ，向上爬两个台阶，到达楼梯顶部。</span><br><span class="line">总花费为 15 。</span><br><span class="line">	</span><br><span class="line">示例 2：</span><br><span class="line">输入：cost = [1,100,1,1,1,100,1,1,100,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：你将从下标为 0 的台阶开始。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</span><br><span class="line">- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</span><br><span class="line">- 支付 1 ，向上爬一个台阶，到达楼梯顶部。</span><br><span class="line">总花费为 6 。</span><br></pre></td></tr></table></figure>

<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>动态规划五部曲：</p>
<ol>
<li>确定dp[i]。dp[i]表示踏上第i台阶最低花费<ol>
<li>dp[i-1]：踏上第i-1台阶最低花费，那么只需要再爬1个台阶即可到达第i台阶，<br>  最低花费dp[i-1]+cost[i-1]</li>
<li>dp[i-2]：踏上第i-2台阶最低花费，要到达到第i台阶则有两种方式：<ol>
<li>一个一个台阶爬，花费dp[i-2]+cost[i-2]+cost[i-1]，这样花费肯定多</li>
<li>爬2个台阶，花费dp[i-2]+cost[i-2]</li>
</ol>
</li>
</ol>
</li>
<li>确定状态转移方程。求最低花费dp[i]，其实就是求dp[i-1]与dp[i-2]+cost[i]最小值  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])</span><br></pre></td></tr></table></figure></li>
<li>确定dp初始化。<ol>
<li>dp[0]表示从第0台阶（那就是地面咯）到楼顶最低花费，所以dp[0]&#x3D;0</li>
<li>dp[1]表示从第1台阶到楼顶最低花费，所以dp[1]&#x3D;cost[0]</li>
</ol>
</li>
<li>确定for循环长度、顺序、开始位置。</li>
<li>举例推导dp数组。</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cost.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="爬楼梯（进阶版）"><a href="#爬楼梯（进阶版）" class="headerlink" title="爬楼梯（进阶版）"></a>爬楼梯（进阶版）</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬至多m (1 &lt;&#x3D; m &lt; n)个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<p>输入描述：输入共一行，包含两个正整数，分别表示n, m</p>
<p>输出描述：输出一个整数，表示爬到楼顶的方法数。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入示例：3 2</span><br><span class="line">输出示例：3</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">当 m = 2，n = 3 时，</span><br><span class="line">n = 3 这表示一共有三个台阶，</span><br><span class="line">m = 2 代表你每次可以爬一个台阶或者两个台阶。</span><br><span class="line">此时你有三种方法可以爬到楼顶。</span><br><span class="line"></span><br><span class="line">1 阶 + 1 阶 + 1 阶段</span><br><span class="line">1 阶 + 2 阶</span><br><span class="line">2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里<strong>完全背包</strong>问题。</p>
<p>动态规划五部曲：</p>
<ol>
<li>确定dp[i]。dp[i]表示踏上第i台阶有dp[i]种方法<ol>
<li>dp[i-j]：踏上第i-j台阶，那么只需要再爬j个台阶即可到达第i台阶，<br>  共dp[i-j]方式</li>
</ol>
</li>
<li>确定状态转移方程。   <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp[i] += dp[i-j]</span><br></pre></td></tr></table></figure></li>
<li>确定dp初始化。 p[0]表示踏上第0台阶（那就是地面咯），所以dp[0]&#x3D;1</li>
<li>确定for循环长度、顺序、开始位置。</li>
<li>举例推导dp数组。</li>
</ol>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; j) &#123;</span><br><span class="line">                dp[i] += dp[i - j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://gitee.com/maozzi/algorithm/blob/master/src/main/java/com/maozzi/dp/ClimbStair.java">maozzi&#x2F;algorithm项目源码</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>连续正整数数列</title>
    <url>/2024/03/12/algorithm/other/continuous-int-sequence/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知连续正整数数列{K}&#x3D;K1,K2,K3…Ki的各个数相加之和为S，<br>i&#x3D;N (0&lt;S&lt;100000, 0&lt;N&lt;100000), 求此数列K。</p>
<p>输入描述：输入包含两个参数，1）连续正整数数列和S，2）数列里数的个数N。</p>
<p>输出描述：如果有解输出数列K，如果无解输出-1</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例1：</span><br><span class="line">输入：525 6</span><br><span class="line">输出：85 86 87 88 89 90</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>暴力解法。两层for循环遍历。第一层for循环遍历S，第二层以上一层基础起点，<br>遍历n次，累加和等于S则跳出。时间复杂度：O(sn)</li>
<li>数学方程式思路。连续的整数和，假设开始的整数为m。<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">S = m + (m+1) + (m+2) + (m+3) + (m+4) + ... + (m+n-1)，等差数列求和公式</span><br><span class="line">整理后：s = mn + (n*(0 + n-1)/2)</span><br><span class="line">再整理：m = s/n - (n-1)/2</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="解法1：暴力解法"><a href="#解法1：暴力解法" class="headerlink" title="解法1：暴力解法"></a>解法1：暴力解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] test(<span class="type">int</span> s, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            temp += j + i;</span><br><span class="line">            res[j] = j + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp == s) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解法2：数学思想"><a href="#解法2：数学思想" class="headerlink" title="解法2：数学思想"></a>解法2：数学思想</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] test2(<span class="type">int</span> s, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s / n - (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        res[j] = j + m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://gitee.com/maozzi/algorithm/blob/master/src/main/java/com/maozzi/other/ContinuousIntSequence.java">maozzi&#x2F;algorithm项目 <strong>连续正整数数列</strong> 源码</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数列</tag>
      </tags>
  </entry>
  <entry>
    <title>每日温度</title>
    <url>/2024/03/26/algorithm/stack/daily-temperature/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p><a href="https://leetcode.cn/problems/daily-temperatures/description/">Leetcode题目链接：739. 每日温度</a></p>
</blockquote>
<p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，<br>其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。<br>如果气温在这之后都不会升高，请在该位置用 0 来代替。</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class="line">输出: [1,1,4,2,1,1,0,0]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: temperatures = [30,40,50,60]</span><br><span class="line">输出: [1,1,1,0]</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: temperatures = [30,60,90]</span><br><span class="line">输出: [1,1,0]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>暴力两层for循环，时间复杂度：O(n^2)</li>
<li>使用栈，保存的元素为数组的索引index。一层循环遍历，<br>反复比较当天温度与栈顶元素对应的温度，如果大于当天温度则出栈；<br>否则在栈保存当天温度的索引index，让栈中的元素对应的温度呈现单调递增。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解法2源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (temperatures[peek] &lt; temperatures[i]) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                res[peek] = i - peek;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://gitee.com/maozzi/algorithm/blob/master/src/main/java/com/maozzi/stack/MonotonicStack.java">maozzi&#x2F;algorithm项目 每日温度 源码</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>下一个更大元素系列</title>
    <url>/2024/04/07/algorithm/stack/next-greater-element/</url>
    <content><![CDATA[<h2 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a>496. 下一个更大元素 I</h2><p><a href="https://leetcode.cn/problems/next-greater-element-i/">Leetcode题目：496. 下一个更大元素 I</a></p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p>
<p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。</p>
<p>对于每个 0 &lt;&#x3D; i &lt; nums1.length ，找出满足 nums1[i] &#x3D;&#x3D; nums2[j] 的下标 j ，<br>并且在 nums2 确定 nums2[j] 的 下一个更大元素。如果不存在下一个更大元素，那么本次查询的答案是 -1 。</p>
<p>返回一个长度为 nums1.length 的数组 ans 作为答案，满足 ans[i] 是如上所述的 下一个更大元素 。</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums1 = [4,1,2], nums2 = [1,3,4,2].</span><br><span class="line">输出：[-1,3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br><span class="line">- 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums1 = [2,4], nums2 = [1,2,3,4].</span><br><span class="line">输出：[3,-1]</span><br><span class="line">解释：nums1 中每个值的下一个更大元素如下所述：</span><br><span class="line">- 2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。</span><br><span class="line">- 4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>暴力解法。两层for循环，先判断num1元素在num2中的位置，再取下一个大于的元素</li>
<li>栈思路。使用栈保存nums2的索引，同时保持栈中元素对应的数值是单调递增的。</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res[i] = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k : nums2) &#123;</span><br><span class="line">            flag = flag ? flag : k == nums1[i];</span><br><span class="line">            <span class="keyword">if</span> (flag &amp;&amp; k &gt; nums1[i]) &#123;</span><br><span class="line">                res[i] = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈思路"><a href="#栈思路" class="headerlink" title="栈思路"></a>栈思路</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElement2(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        map.put(nums1[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums2.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums2[stack.peek()] &lt; nums2[i]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums2[stack.pop()];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(temp)) &#123;</span><br><span class="line">                res[map.get(temp)] = nums2[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a>503. 下一个更大元素 II</h2><p><a href="https://leetcode.cn/problems/next-greater-element-ii/description/">Leetcode题目：503. 下一个更大元素 II</a></p>
<h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个循环数组 nums （ nums[nums.length - 1] 的下一个元素是 nums[0] ），返回 nums 中每个元素的 下一个更大元素 。</p>
<p>数字 x 的 下一个更大的元素 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1 。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: nums = [1,2,1]</span><br><span class="line">输出: [2,-1,2]</span><br><span class="line">解释: 第一个 1 的下一个更大的数是 2；</span><br><span class="line">数字 2 找不到下一个更大的数；</span><br><span class="line">第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: nums = [1,2,3,4,3]</span><br><span class="line">输出: [2,3,4,-1,4]</span><br></pre></td></tr></table></figure>

<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>暴力解法。两层for循环，外层从0依次递增遍历，里层以上一层位置+1作为开始<br>遍历位置，当里层遍历数组最后位置，则开始重新以0开始遍历，直至上层循环开始位置。</li>
<li>栈思路。使用栈保存nums2的索引，同时保持栈中元素对应的数值是单调递增的。</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="暴力解法-1"><a href="#暴力解法-1" class="headerlink" title="暴力解法"></a>暴力解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span> == len ? <span class="number">0</span> : i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; len &amp;&amp; j != i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[i]) &#123;</span><br><span class="line">                res[i] = nums[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= len) &#123;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElements3(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; len * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j % len] &gt; nums[i % len]) &#123;</span><br><span class="line">                res[i % len] = nums[j % len];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈思路-1"><a href="#栈思路-1" class="headerlink" title="栈思路"></a>栈思路</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElements2(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; nums[i % len]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            res[j] = nums[i % len];</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i % len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://gitee.com/maozzi/algorithm/blob/master/src/main/java/com/maozzi/stack/MonotonicStack.java">maozzi&#x2F;algorithm项目 <strong>下一个更大元素</strong> 源码</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>接雨水</title>
    <url>/2024/03/28/algorithm/stack/trap-rain/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/">Leetcode题目：42. 接雨水</a></p>
<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，<br>下雨之后能接多少雨水。</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：height = [4,2,0,3,2,5]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>暴力解法。唯有山谷可以接住雨水，接住雨水的大小等于左右两边的山峰（left、right）<br>更低的一边，与谷底（当前值）的差值，依次累加</li>
<li>双指针优化。解法1也是双指针，但是有重复的取left、right最大值，优化思路，<br>使用数组保存当前值的left、right最大值。</li>
<li>栈思路。栈保存数组索引，栈头表示当前值，栈头第二个表示left左侧，需要比较的为right</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> height[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[j] &gt; right) &#123;</span><br><span class="line">                right = height[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[j] &gt; left) &#123;</span><br><span class="line">                left = height[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> Math.min(left, right) - height[i];</span><br><span class="line">        res += temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针优化"><a href="#双指针优化" class="headerlink" title="双指针优化"></a>双指针优化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">trap2</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] lefts = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    <span class="type">int</span>[] rights = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line">    lefts[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        lefts[i] = Math.max(height[i], lefts[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rights[len - <span class="number">1</span>] = height[len - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        rights[i] = Math.max(height[i], rights[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        res += Math.min(lefts[i], rights[i]) - height[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈思路"><a href="#栈思路" class="headerlink" title="栈思路"></a>栈思路</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">trap3</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    stack.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.peek()]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> Math.min(height[stack.peek()], height[i]) - height[cur];</span><br><span class="line">                <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> i - stack.peek() - <span class="number">1</span>;</span><br><span class="line">                res += h * w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://gitee.com/maozzi/algorithm/blob/master/src/main/java/com/maozzi/stack/MonotonicStack.java">maozzi&#x2F;algorithm项目源码</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>有效的字符串</title>
    <url>/2024/03/02/algorithm/stack/valid-str/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个只包括<code> &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<p>⚠️注意空字符串可被认为是有效字符串。</p>
<span id="more"></span>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 3:</span><br><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 4:</span><br><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 5:</span><br><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>循环遍历字符串，使用栈 <code>Stack</code> 保存未匹配的左侧字符串，包括 <code>(、&#123;、[</code>，<br>如果遇到对应的右侧字符串， 则选择出栈 <code>pop</code>，直到循环完成，最后判断栈是否为空。</p>
<ol>
<li>栈为空，则说明该字符串是有效字符串</li>
<li>栈为空，则说明该字符串是无效字符串</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidStr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设这是输入的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&#123;[(]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;)&quot;</span>, <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(str.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s) &amp;&amp; !stack.isEmpty()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">                <span class="keyword">if</span> (peek.equals(map.get(s))) &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断stack是否为空</span></span><br><span class="line">        System.out.println(stack.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://gitee.com/maozzi/algorithm/blob/master/src/main/java/com/maozzi/stack/ValidStr.java">maozzi&#x2F;algorithm项目ValidStr源码</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal详解</title>
    <url>/2023/06/14/java/current/threadlocal/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假设在一个项目中，多个线程对一个共享的公共变量&#x2F;常量进行读取和修改，会出现什么结果呢？<br>每个线程读取的值是否一致？每个线程修改后的值与期望值是否一致？</p>
<span id="more"></span>

<p>下面代码中：</p>
<ol>
<li>每个线程期望读取的值为：(0,0)</li>
<li>每个线程期望修改后输出：(1,10)或者(2,20)，在自身使用完后重新赋值：(0,0)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> num;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> staticNum;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">      <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; test.print(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>, <span class="number">10</span>)).start();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; test.print(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>, <span class="number">20</span>)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String prefix, <span class="type">int</span> num, <span class="type">int</span> staticNum)</span> &#123;</span><br><span class="line">      System.out.println(prefix + <span class="string">&quot;-开始: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, num=&quot;</span> + <span class="built_in">this</span>.num + <span class="string">&quot;, staticNum=&quot;</span> + Test.staticNum);</span><br><span class="line">      <span class="built_in">this</span>.num = num;</span><br><span class="line">      Test.staticNum = staticNum;</span><br><span class="line">      System.out.println(prefix + <span class="string">&quot;-结束: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, num=&quot;</span> + <span class="built_in">this</span>.num + <span class="string">&quot;, staticNum=&quot;</span> + Test.staticNum);</span><br><span class="line">      <span class="built_in">this</span>.num = <span class="number">0</span>;</span><br><span class="line">      Test.staticNum = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>输出结果截图，不尽人意，或许也在意料之中：</p>
<ol>
<li>个别线程读取值为：(1,10)或者(2,20)</li>
<li>1组中个别线程输出值为：(0,0)或者(2,20)</li>
<li>2组中个别线程输出值为：(0,0)或者(1,10)</li>
</ol>
<img src="/2023/06/14/java/current/threadlocal/img.png" class="" title="img.png">

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="并发编程3大特性"><a href="#并发编程3大特性" class="headerlink" title="并发编程3大特性"></a>并发编程3大特性</h3><blockquote>
<ol>
<li>原子性：一次或多次操作，要么所有操作全部成功或者全部失败</li>
<li>可见性：当一个线程修改共享变量时，其他线程可以立即看到修改后的值</li>
<li>有序性：代码执行顺序必须按照书写顺序执行</li>
</ol>
</blockquote>
<h3 id="Java-4种引用类型"><a href="#Java-4种引用类型" class="headerlink" title="Java 4种引用类型"></a>Java 4种引用类型</h3><blockquote>
<ol>
<li>强引用：使用最多的引用类型，使用 new 方式创建的对象就是强引用。 永远不会被回收，哪怕内存不足</li>
<li>软引用：使用 <code>SoftReference</code> 修饰的对象。内存溢出时会被回收</li>
<li>弱引用：使用 <code>WeakReference</code> 修饰的对象。垃圾回收器发生GC就会被回收</li>
<li>虚引用：使用 <code>PhantomReference</code> 修饰的对象。随时会被回收</li>
</ol>
</blockquote>
<h3 id="线程安全-线程不安全"><a href="#线程安全-线程不安全" class="headerlink" title="线程安全&#x2F;线程不安全"></a>线程安全&#x2F;线程不安全</h3><blockquote>
<p>线程安全&#x2F;不安全，是指在多线程环境下，对于同一份数据的访问是否能够保证其正确性和一致性的描述。</p>
<ol>
<li>线程安全指的是在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。</li>
<li>线程不安全则表示在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。</li>
</ol>
</blockquote>
<p>上面的情况，称为<strong>线程不安全</strong>。一般提供3种解决方案：</p>
<ol>
<li>volatile，保证可见性、防重排序。但是对于上面的场景明显没效果</li>
<li>synchronized，线程安全<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> num;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> staticNum;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">      <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; test.print(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>, <span class="number">10</span>)).start();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; test.print(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>, <span class="number">20</span>)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 方法加synchronized</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String prefix, <span class="type">int</span> num, <span class="type">int</span> staticNum)</span> &#123;</span><br><span class="line">      System.out.println(prefix + <span class="string">&quot;-开始: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, num=&quot;</span> + <span class="built_in">this</span>.num + <span class="string">&quot;, staticNum=&quot;</span> + Test.staticNum);</span><br><span class="line">      <span class="built_in">this</span>.num = num;</span><br><span class="line">      Test.staticNum = staticNum;</span><br><span class="line">      System.out.println(prefix + <span class="string">&quot;-结束: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, num=&quot;</span> + <span class="built_in">this</span>.num + <span class="string">&quot;, staticNum=&quot;</span> + Test.staticNum);</span><br><span class="line">      <span class="built_in">this</span>.num = <span class="number">0</span>;</span><br><span class="line">      Test.staticNum = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ThreadLocal，线程副本<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> staticNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;Test&gt; LOCAL = ThreadLocal.withInitial(Test::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; test.print(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>, <span class="number">10</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; test.print(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>, <span class="number">20</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String prefix, <span class="type">int</span> num, <span class="type">int</span> staticNum)</span> &#123;</span><br><span class="line">        System.out.println(prefix + <span class="string">&quot;-开始: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, num=&quot;</span> + <span class="built_in">this</span>.num + <span class="string">&quot;, staticNum=&quot;</span> + Test.staticNum);</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        Test.staticNum = staticNum;</span><br><span class="line">        LOCAL.set(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(prefix + <span class="string">&quot;-结束: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, num=&quot;</span> + <span class="built_in">this</span>.num + <span class="string">&quot;, staticNum=&quot;</span> + Test.staticNum);</span><br><span class="line">        <span class="built_in">this</span>.num = <span class="number">0</span>;</span><br><span class="line">        Test.staticNum = <span class="number">0</span>;</span><br><span class="line">        LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><blockquote>
<p>内存泄漏是指应用程序中分配的内存（通常是堆内存）在不再需要时未能正确释放。<br>也就是说，本该被回收的对象未能被回收，而这些未被回收释放的对象（内存）会累积，<br>最终造成内存资源被消耗完全，应用程序异常错误甚至崩溃的情况。</p>
</blockquote>
<h2 id="Thread-内部结构"><a href="#Thread-内部结构" class="headerlink" title="Thread 内部结构"></a><code>Thread</code> 内部结构</h2><p>再看看 <code>Thread</code> 内部结构，如图:</p>
<img src="/2023/06/14/java/current/threadlocal/img_1.png" class="" title="img_1.png">

<p><code>Thread</code> 内部有一个 <code>ThreadLocalMap</code> 类型的变量 <code>threadLocals</code><br>和 <code>inheritableThreadLocals</code> 两个变量，也就是说，每个线程都有自己的 <code>ThreadLocalMap</code>。</p>
<blockquote>
<ol>
<li>threadLocals：保存 thread 自身的数据副本数据</li>
<li>inheritableThreadLocals：保存 thread 父线程的数据副本</li>
</ol>
</blockquote>
<p><code>ThreadLocalMap</code> 类似 <code>HashMap</code>结构，但是没有链表，内部只维护 <code>Entry</code> 数组，<br>同时<code>Entry</code> 继承 <code>WeakReference</code>（弱引用类型），<br><code>key</code> 为 <code>ThreadLocal</code> 本身，<code>value</code> 为 <code>ThreadLocal</code> 指定泛型对象。</p>
<h3 id="ThreadLocal-是线程安全的"><a href="#ThreadLocal-是线程安全的" class="headerlink" title="ThreadLocal 是线程安全的"></a>ThreadLocal 是线程安全的</h3><p>每个线程在往 <code>ThreadLocal</code> 里放值时，都会往自己的 <code>ThreadLocalMap</code> 里存，<br>读也是以 <code>ThreadLocal</code> 作为引用，在自己的map里找对应的key，从而实现了<strong>线程隔离（线程安全）</strong>。</p>
<h3 id="ThreadLocal-内存泄漏问题"><a href="#ThreadLocal-内存泄漏问题" class="headerlink" title="ThreadLocal 内存泄漏问题"></a>ThreadLocal 内存泄漏问题</h3><p><code>ThreadLocalMap</code> 使用 <code>ThreadLocal</code> 的弱引用作为 <code>key</code> ，当 <code>ThreadLocal</code> 变量<br>被手动赋值为 <code>null</code>（即ThreadLocal对象没有外部强引用来引用它），当发生GC时，<code>ThreadLocal</code><br>一定会被回收。<code>ThreadLocalMap</code> 中会存在 <code>key</code> 为null的 <code>Entry</code>，<code>Entry</code> 中的 <code>value</code><br>由于 <code>key</code> 为null无法被访问。如果当前线程迟迟没有结束（线程池中的线程），value 永远存在，从而<br>造成内存泄漏。所以在使用完，手动调用 <code>remove</code> 方法进行释放</p>
<p>ThreadLocal 变量正常使用不为null：</p>
<img src="/2023/06/14/java/current/threadlocal/img_2.png" class="" title="img_3.png">

<p>ThreadLocal 变量手动赋值 null：</p>
<img src="/2023/06/14/java/current/threadlocal/img_3.png" class="" title="img_2.png">

<h2 id="ThreadLocal-源码解析"><a href="#ThreadLocal-源码解析" class="headerlink" title="ThreadLocal 源码解析"></a>ThreadLocal 源码解析</h2><h3 id="set-方法"><a href="#set-方法" class="headerlink" title="set 方法"></a>set 方法</h3><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
</search>
